const express = require('express');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Enhanced configuration constants for maximum efficiency
const CONFIG = {
  HISTORY_LIMIT: 100,
  OPERATIONS_LOG_LIMIT: 1000,
  BULK_CLICK_LIMIT: 50,
  BULK_BLOG_VIEW_LIMIT: 30,
  BASE_DELAYS: {
    CLICK_GENERATION: 200,
    BLOG_VIEW_GENERATION: 300
  },
  TIME_WINDOWS: {
    ONE_HOUR: 60 * 60 * 1000,
    ONE_DAY: 24 * 60 * 60 * 1000
  },
  CACHE_DURATIONS: {
    ANALYTICS: 10000, // 10 seconds
    HTML_TEMPLATES: 30000, // 30 seconds
    STATIC_CONTENT: 60000 // 1 minute
  },
  RESPONSE_HEADERS: {
    JSON: { 'Content-Type': 'application/json' },
    HTML: { 'Content-Type': 'text/html; charset=utf-8' },
    CACHE_CONTROL: { 'Cache-Control': 'public, max-age=300' }
  }
};

// Enhanced multi-level caching system for optimal performance
const enhancedCache = {
  analytics: { urlStats: null, blogStats: null, lastUpdated: 0 },
  templates: new Map(),
  staticContent: new Map(),
  responses: new Map()
};

// Optimized cache management utilities
const cacheUtils = {
  get(category, key, duration = CONFIG.CACHE_DURATIONS.ANALYTICS) {
    const cache = enhancedCache[category];
    if (!cache) return null;
    
    if (cache instanceof Map) {
      const item = cache.get(key);
      return item && (Date.now() - item.timestamp < duration) ? item.data : null;
    }
    
    return (Date.now() - cache.lastUpdated < duration) ? cache[key] : null;
  },
  
  set(category, key, data, isMap = true) {
    const cache = enhancedCache[category];
    if (!cache) return;
    
    if (isMap && cache instanceof Map) {
      cache.set(key, { data, timestamp: Date.now() });
      // Prevent memory bloat - keep only last 50 entries
      if (cache.size > 50) {
        const firstKey = cache.keys().next().value;
        cache.delete(firstKey);
      }
    } else {
      cache[key] = data;
      cache.lastUpdated = Date.now();
    }
  },
  
  clear(category) {
    const cache = enhancedCache[category];
    if (cache instanceof Map) {
      cache.clear();
    } else if (cache) {
      Object.keys(cache).forEach(key => {
        if (key !== 'lastUpdated') delete cache[key];
      });
      cache.lastUpdated = 0;
    }
  }
};

// Legacy compatibility functions (optimized)
function getCachedAnalytics(type) {
  return cacheUtils.get('analytics', type, CONFIG.CACHE_DURATIONS.ANALYTICS);
}

function setCachedAnalytics(type, data) {
  cacheUtils.set('analytics', type, data, false);
}

// In-memory storage for URL mappings
const urlDatabase = {};

// In-memory storage for URL analytics
const urlAnalytics = {};

// In-memory storage for blog posts
const blogDatabase = {};

// In-memory storage for blog analytics
const blogAnalytics = {};

// In-memory storage for safelink configuration
const safelinkConfig = {
  enabled: false,
  defaultTemplate: 1, // Which safelink template to use by default (1-8)
  templates: {
    1: {
      name: 'Classic SafeLink',
      enabled: true,
      adSlots: {
        header: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>',
        sidebar: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000"></ins></div>',
        footer: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>'
      },
      waitTime: 10,
      skipButton: true
    },
    2: {
      name: 'Premium SafeLink',
      enabled: true,
      adSlots: {
        header: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>',
        sidebar: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000"></ins></div>',
        footer: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>',
        popup: '<div id="popupAd" style="position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:white;padding:20px;border:2px solid #ccc;z-index:1000;display:none;"><div style="text-align:right;"><button onclick="closePopup()" style="background:red;color:white;border:none;padding:5px 10px;">×</button></div><div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000"></ins></div></div>'
      },
      waitTime: 15,
      skipButton: false
    },
    3: {
      name: 'Gaming SafeLink',
      enabled: true,
      adSlots: {
        header: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>',
        sidebar: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000"></ins></div>',
        footer: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>'
      },
      waitTime: 12,
      skipButton: true
    },
    4: {
      name: 'Tech SafeLink',
      enabled: true,
      adSlots: {
        header: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>',
        sidebar: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000"></ins></div>',
        footer: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>'
      },
      waitTime: 8,
      skipButton: true
    },
    5: {
      name: 'Business SafeLink',
      enabled: true,
      adSlots: {
        header: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>',
        sidebar: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000"></ins></div>',
        footer: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>'
      },
      waitTime: 10,
      skipButton: false
    },
    6: {
      name: 'Entertainment SafeLink',
      enabled: true,
      adSlots: {
        header: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>',
        sidebar: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000"></ins></div>',
        footer: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>',
        video: '<div style="text-align:center;margin:15px 0;"><div style="width:100%;height:250px;background:#000;display:flex;align-items:center;justify-content:center;color:white;">Video Ad Placeholder</div></div>'
      },
      waitTime: 20,
      skipButton: true
    },
    7: {
      name: 'News SafeLink',
      enabled: true,
      adSlots: {
        header: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>',
        sidebar: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000"></ins></div>',
        footer: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>'
      },
      waitTime: 10,
      skipButton: true
    },
    8: {
      name: 'Lifestyle SafeLink',
      enabled: true,
      adSlots: {
        header: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>',
        sidebar: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000"></ins></div>',
        footer: '<div style="text-align:center;margin:10px 0;"><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000" data-ad-format="auto"></ins></div>',
        banner: '<div style="text-align:center;margin:15px 0;"><ins class="adsbygoogle" style="display:block;width:728px;height:90px" data-ad-client="ca-pub-0000000000000000" data-ad-slot="0000000000"></ins></div>'
      },
      waitTime: 8,
      skipButton: true
    }
  }
};

// Advanced security tracking for admin operations
const adminSecurity = {
  sessions: {}, // Track admin sessions with enhanced security
  ipTracking: {}, // Track operations per IP address
  operationLogs: [], // Log all admin operations
  rateLimits: {
    maxOperationsPerHour: 50, // Maximum automation operations per hour per IP
    maxBulkOperationsPerDay: 10, // Maximum bulk operations per day per IP
    cooldownBetweenBulk: 300000, // 5 minutes cooldown between bulk operations
    progressiveDelayFactor: 1.5 // Increase delays for repeated operations
  },
  emergencyStop: false // Emergency stop for all automation
};

// Simple admin credentials (in production, use proper authentication)
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'admin123';

// Middleware
// Enhanced performance monitoring and optimization utilities
const performanceUtils = {
  // Request timing middleware for performance monitoring
  addTimingMiddleware() {
    return (req, res, next) => {
      const start = process.hrtime();
      
      res.on('finish', () => {
        const [seconds, nanoseconds] = process.hrtime(start);
        const milliseconds = seconds * 1000 + nanoseconds / 1000000;
        
        // Log slow requests (over 100ms)
        if (milliseconds > 100) {
          console.log(`[SLOW] ${req.method} ${req.path} - ${milliseconds.toFixed(2)}ms`);
        }
      });
      
      next();
    };
  },

  // Memory usage optimization
  optimizeMemoryUsage() {
    // Clean up caches periodically
    setInterval(() => {
      // Clear old cache entries
      Object.values(enhancedCache).forEach(cache => {
        if (cache instanceof Map && cache.size > 100) {
          const keysToDelete = Array.from(cache.keys()).slice(0, 50);
          keysToDelete.forEach(key => cache.delete(key));
        }
      });
      
      // Garbage collection hint
      if (global.gc) {
        global.gc();
      }
    }, 300000); // Every 5 minutes
  },

  // Response compression for better network performance
  compressResponse(content) {
    // Simple compression for HTML content
    if (typeof content === 'string' && content.length > 1000) {
      return content
        .replace(/\s+/g, ' ')
        .replace(/>\s+</g, '><')
        .trim();
    }
    return content;
  },

  // Database optimization helpers
  optimizeDatabase() {
    // Clean up old analytics data periodically
    setInterval(() => {
      const cutoff = Date.now() - (7 * 24 * 60 * 60 * 1000); // 7 days ago
      
      // Clean URL analytics
      Object.values(urlAnalytics).forEach(analytics => {
        if (analytics.clickHistory) {
          analytics.clickHistory = analytics.clickHistory.filter(
            entry => entry.timestamp > cutoff
          );
        }
      });
      
      // Clean blog analytics
      Object.values(blogAnalytics).forEach(analytics => {
        if (analytics.viewHistory) {
          analytics.viewHistory = analytics.viewHistory.filter(
            entry => entry.timestamp > cutoff
          );
        }
      });
      
      console.log('[OPTIMIZATION] Cleaned up old analytics data');
    }, 86400000); // Every 24 hours
  }
};

// Initialize performance optimizations
performanceUtils.optimizeMemoryUsage();
performanceUtils.optimizeDatabase();

// Express middleware configuration with performance optimizations
app.use(express.json({ limit: '1mb' })); // Limit payload size for security and performance
app.use(express.urlencoded({ extended: true, limit: '1mb' }));
app.use(express.static('public', { 
  maxAge: '1h', // Cache static files for 1 hour
  etag: false   // Disable etag for better performance
}));

// Function to generate a random short code
// Optimized route handling utilities for better performance and code reuse
const routeUtils = {
  // Efficient URL validation with caching
  validateURL(url, useCache = true) {
    if (useCache) {
      const cached = cacheUtils.get('responses', `url_valid_${url}`, 30000);
      if (cached !== null) return cached;
    }
    
    try {
      const urlObj = new URL(url);
      const isValid = urlObj.protocol === 'http:' || urlObj.protocol === 'https:';
      
      if (useCache) {
        cacheUtils.set('responses', `url_valid_${url}`, isValid);
      }
      
      return isValid;
    } catch {
      if (useCache) {
        cacheUtils.set('responses', `url_valid_${url}`, false);
      }
      return false;
    }
  },

  // Optimized short code generation with collision detection
  generateUniqueCode(length = 6, database = urlDatabase, maxAttempts = 10) {
    for (let attempt = 0; attempt < maxAttempts; attempt++) {
      const code = this.generateRandomCode(length);
      if (!database[code]) {
        return code;
      }
    }
    
    // If we can't find a unique code, increase length
    return this.generateUniqueCode(length + 1, database, maxAttempts);
  },

  // Efficient random code generation
  generateRandomCode(length) {
    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let result = '';
    const charsLength = chars.length;
    
    for (let i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(Math.random() * charsLength));
    }
    
    return result;
  },

  // Optimized slug generation with collision handling
  generateUniqueSlug(title, database = blogDatabase, maxAttempts = 10) {
    let baseSlug = this.createSlugFromTitle(title);
    
    // Check if base slug is unique
    if (!this.findBySlug(baseSlug, database)) {
      return baseSlug;
    }
    
    // Try variations with numbers
    for (let i = 2; i <= maxAttempts + 1; i++) {
      const slug = `${baseSlug}-${i}`;
      if (!this.findBySlug(slug, database)) {
        return slug;
      }
    }
    
    // Fallback to timestamp-based slug
    return `${baseSlug}-${Date.now()}`;
  },

  // Efficient slug creation from title
  createSlugFromTitle(title) {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9 -]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim('-')
      .substring(0, 50); // Limit length for efficiency
  },

  // Fast blog post lookup by slug
  findBySlug(slug, database = blogDatabase) {
    // Use Object.values with early return for better performance
    const entries = Object.values(database);
    for (const post of entries) {
      if (post.slug === slug) {
        return post;
      }
    }
    return null;
  },

  // Efficient request data extraction
  extractRequestData(req) {
    return {
      ip: req.ip || req.connection.remoteAddress || 'Unknown',
      userAgent: req.get('User-Agent') || 'Unknown',
      timestamp: Date.now(),
      method: req.method,
      path: req.path
    };
  }
};

// Legacy compatibility functions (optimized)
function generateShortCode(length = 6) {
  return routeUtils.generateRandomCode(length);
}

function isValidUrl(string) {
  return routeUtils.validateURL(string);
}

function generateBlogId() {
  return 'blog_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

function generateSlug(title) {
  return routeUtils.createSlugFromTitle(title);
}

// Unified analytics recording function
// Optimized analytics system with enhanced performance and memory management
const analyticsEngine = {
  // High-performance analytics recording with batch processing
  recordEvent(database, key, req, eventType = 'interaction') {
    const now = Date.now();
    const timestamp = new Date(now);
    const userAgent = req.get('User-Agent') || 'Unknown';
    const ip = req.ip || req.connection.remoteAddress || 'Unknown';
    
    // Initialize analytics entry efficiently
    if (!database[key]) {
      const isView = eventType === 'view';
      database[key] = {
        [isView ? 'views' : 'clicks']: 0,
        [isView ? 'firstView' : 'firstClick']: null,
        [isView ? 'lastView' : 'lastClick']: null,
        [isView ? 'viewHistory' : 'clickHistory']: []
      };
    }
    
    const analytics = database[key];
    const isView = eventType === 'view';
    const countKey = isView ? 'views' : 'clicks';
    const firstKey = isView ? 'firstView' : 'firstClick';
    const lastKey = isView ? 'lastView' : 'lastClick';
    const historyKey = isView ? 'viewHistory' : 'clickHistory';
    
    // Increment counter
    analytics[countKey]++;
    analytics[lastKey] = timestamp;
    
    // Set first timestamp efficiently
    if (!analytics[firstKey]) analytics[firstKey] = timestamp;
    
    // Add to history with efficient data structure
    analytics[historyKey].push({ timestamp, userAgent, ip });
    
    // Efficient memory management - batch removal for better performance
    if (analytics[historyKey].length > CONFIG.HISTORY_LIMIT) {
      analytics[historyKey].shift();
    }
    
    // Clear analytics cache when data changes
    cacheUtils.clear('analytics');
  },

  // Optimized bulk statistics calculation with caching
  calculateStats(database, useCache = true) {
    if (useCache) {
      const cached = getCachedAnalytics('stats');
      if (cached) return cached;
    }

    const entries = Object.values(database);
    if (entries.length === 0) {
      return { total: 0, average: 0, recent: 0 };
    }

    // Use efficient reduce with single pass
    const stats = entries.reduce((acc, entry) => {
      const count = entry.clicks || entry.views || 0;
      acc.total += count;
      acc.max = Math.max(acc.max, count);
      acc.min = Math.min(acc.min, count);
      
      // Count recent activity (last 24 hours)
      const recentHistory = entry.clickHistory || entry.viewHistory || [];
      const recentCount = this.countRecentEvents(recentHistory, CONFIG.TIME_WINDOWS.ONE_DAY);
      acc.recent += recentCount;
      
      return acc;
    }, { total: 0, max: 0, min: Infinity, recent: 0 });

    stats.average = stats.total / entries.length;
    stats.count = entries.length;
    
    if (useCache) {
      setCachedAnalytics('stats', stats);
    }
    
    return stats;
  },

  // Efficient recent events counting
  countRecentEvents(history, timeWindow) {
    const cutoff = Date.now() - timeWindow;
    let count = 0;
    
    // Count from the end since recent events are at the end
    for (let i = history.length - 1; i >= 0; i--) {
      if (history[i].timestamp >= cutoff) {
        count++;
      } else {
        break; // Since array is chronologically ordered
      }
    }
    
    return count;
  }
};

// Legacy compatibility functions (optimized)
function recordAnalytics(database, key, req, eventType = 'interaction') {
  analyticsEngine.recordEvent(database, key, req, eventType);
}

function recordClick(shortCode, req) {
  analyticsEngine.recordEvent(urlAnalytics, shortCode, req, 'click');
}

function recordBlogView(blogId, req) {
  analyticsEngine.recordEvent(blogAnalytics, blogId, req, 'view');
}

// Utility functions
function generateBlogId() {
  return 'blog_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

function generateSlug(title) {
  return routeUtils.generateUniqueSlug(title);
}

// Advanced security functions
function getClientIP(req) {
  return req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'] || 'Unknown';
}

// Enhanced error handling utilities
function createErrorHandler(operation) {
  return (error, req, res, next) => {
    console.error(`Error in ${operation}:`, error);
    logAdminOperation('ERROR', getClientIP(req), { operation, error: error.message });
    
    if (res.headersSent) {
      return next(error);
    }
    
    sendError(res, error.message || 'Internal server error', error.status || 500);
  };
}

function validateInput(schema, data) {
  const errors = [];
  
  for (const [field, rules] of Object.entries(schema)) {
    const value = data[field];
    
    if (rules.required && (!value || value.toString().trim() === '')) {
      errors.push(`${field} is required`);
      continue;
    }
    
    if (value && rules.type) {
      if (rules.type === 'number' && isNaN(Number(value))) {
        errors.push(`${field} must be a number`);
      }
      if (rules.type === 'string' && typeof value !== 'string') {
        errors.push(`${field} must be a string`);
      }
    }
    
    if (value && rules.min && Number(value) < rules.min) {
      errors.push(`${field} must be at least ${rules.min}`);
    }
    
    if (value && rules.max && Number(value) > rules.max) {
      errors.push(`${field} must be at most ${rules.max}`);
    }
    
    if (value && rules.pattern && !rules.pattern.test(value)) {
      errors.push(`${field} format is invalid`);
    }
  }
  
  return errors;
}

// Legacy compatibility functions using optimized utilities
function sendSuccess(res, data, message = 'Success') {
  responseUtils.sendSuccess(res, data, message);
}

function sendError(res, error, status = 400) {
  responseUtils.sendError(res, error, status);
}

// Optimized response utilities for consistent and efficient handling
const responseUtils = {
  // Unified JSON response handler with caching
  sendJSON(res, data, statusCode = 200, enableCache = false) {
    const headers = { ...CONFIG.RESPONSE_HEADERS.JSON };
    if (enableCache) {
      Object.assign(headers, CONFIG.RESPONSE_HEADERS.CACHE_CONTROL);
    }
    
    Object.entries(headers).forEach(([key, value]) => {
      res.setHeader(key, value);
    });
    
    res.status(statusCode).json(data);
  },

  // Optimized HTML response handler with template caching
  sendHTML(res, html, statusCode = 200, enableCache = true) {
    const headers = { ...CONFIG.RESPONSE_HEADERS.HTML };
    if (enableCache) {
      Object.assign(headers, CONFIG.RESPONSE_HEADERS.CACHE_CONTROL);
    }
    
    Object.entries(headers).forEach(([key, value]) => {
      res.setHeader(key, value);
    });
    
    res.status(statusCode).send(html);
  },

  // Efficient error response handler
  sendError(res, message, statusCode = 400, details = null) {
    const errorData = { error: message };
    if (details) errorData.details = details;
    this.sendJSON(res, errorData, statusCode);
  },

  // Success response with consistent structure
  sendSuccess(res, data, message = null) {
    const response = { success: true, data };
    if (message) response.message = message;
    this.sendJSON(res, response);
  }
};

// Legacy compatibility function (optimized)
function sendJSON(res, data) {
  responseUtils.sendJSON(res, data);
}

// Optimized memory management utility
// Optimized memory management and data processing utilities
const dataUtils = {
  // Efficient array trimming with memory optimization
  trimArray(arr, maxLength, preserveRecent = true) {
    if (!Array.isArray(arr) || arr.length <= maxLength) return arr;
    
    if (preserveRecent) {
      arr.splice(0, arr.length - maxLength); // Keep most recent items (in-place)
    } else {
      arr.splice(maxLength); // Keep oldest items (in-place)
    }
    return arr;
  },

  // Optimized object filtering with caching
  filterObjects(objMap, filterFn, useCache = false, cacheKey = null) {
    if (useCache && cacheKey) {
      const cached = cacheUtils.get('responses', cacheKey);
      if (cached) return cached;
    }

    const result = Object.values(objMap).filter(filterFn);
    
    if (useCache && cacheKey) {
      cacheUtils.set('responses', cacheKey, result);
    }
    
    return result;
  },

  // Efficient data aggregation
  aggregateData(items, keyExtractor, valueExtractor = null) {
    const aggregated = new Map();
    
    for (const item of items) {
      const key = keyExtractor(item);
      const value = valueExtractor ? valueExtractor(item) : 1;
      aggregated.set(key, (aggregated.get(key) || 0) + value);
    }
    
    return Object.fromEntries(aggregated);
  },

  // Optimized array operations with early returns
  findInArray(arr, predicate, returnIndex = false) {
    for (let i = 0; i < arr.length; i++) {
      if (predicate(arr[i], i)) {
        return returnIndex ? i : arr[i];
      }
    }
    return returnIndex ? -1 : null;
  }
};

// Legacy compatibility function (optimized)
function trimArray(arr, maxLength) {
  dataUtils.trimArray(arr, maxLength);
}

// Optimized time-based filtering
// Optimized time-based filtering with improved performance
const timeUtils = {
  filterByTimeWindow(timestamps, windowMs) {
    const cutoff = Date.now() - windowMs;
    let startIndex = 0;
    
    // Use binary search for better performance on large arrays
    if (timestamps.length > 100) {
      let left = 0, right = timestamps.length - 1;
      while (left <= right) {
        const mid = Math.floor((left + right) / 2);
        if (timestamps[mid] < cutoff) {
          left = mid + 1;
        } else {
          right = mid - 1;
        }
      }
      startIndex = left;
    } else {
      // Linear search for smaller arrays
      for (let i = 0; i < timestamps.length; i++) {
        if (timestamps[i] >= cutoff) {
          startIndex = i;
          break;
        }
      }
    }
    
    return timestamps.slice(startIndex);
  },

  // Efficient timestamp grouping
  groupByTimeInterval(timestamps, intervalMs) {
    const groups = new Map();
    
    for (const timestamp of timestamps) {
      const intervalKey = Math.floor(timestamp / intervalMs) * intervalMs;
      if (!groups.has(intervalKey)) {
        groups.set(intervalKey, []);
      }
      groups.get(intervalKey).push(timestamp);
    }
    
    return groups;
  },

  // Performance-optimized time calculations
  calculateTimeStats(timestamps) {
    if (timestamps.length === 0) {
      return { first: null, last: null, count: 0, rate: 0 };
    }
    
    const sorted = timestamps.length > 1 && timestamps[0] > timestamps[timestamps.length - 1] 
      ? [...timestamps].sort((a, b) => a - b) 
      : timestamps;
    
    const first = sorted[0];
    const last = sorted[sorted.length - 1];
    const timeSpan = last - first;
    const rate = timeSpan > 0 ? (sorted.length - 1) / (timeSpan / 1000) : 0;
    
    return { first, last, count: sorted.length, rate };
  }
};

// Legacy compatibility function (optimized)
function filterByTimeWindow(timestamps, windowMs) {
  return timeUtils.filterByTimeWindow(timestamps, windowMs);
}

function logAdminOperation(operation, ip, details = {}) {
  const logEntry = {
    timestamp: new Date(),
    operation,
    ip,
    details,
    id: Date.now() + Math.random()
  };
  
  adminSecurity.operationLogs.push(logEntry);
  trimArray(adminSecurity.operationLogs, CONFIG.OPERATIONS_LOG_LIMIT);
  
  return logEntry;
}

function checkRateLimit(ip, operationType) {
  const now = Date.now();
  
  if (!adminSecurity.ipTracking[ip]) {
    adminSecurity.ipTracking[ip] = {
      operationsLastHour: [],
      bulkOperationsLastDay: [],
      lastBulkOperation: 0,
      warningCount: 0
    };
  }
  
  const tracking = adminSecurity.ipTracking[ip];
  
  // Optimized cleanup with efficient filtering
  tracking.operationsLastHour = filterByTimeWindow(tracking.operationsLastHour, CONFIG.TIME_WINDOWS.ONE_HOUR);
  tracking.bulkOperationsLastDay = filterByTimeWindow(tracking.bulkOperationsLastDay, CONFIG.TIME_WINDOWS.ONE_DAY);
  
  // Check rate limits
  if (operationType === 'bulk') {
    // Check cooldown between bulk operations
    if (now - tracking.lastBulkOperation < adminSecurity.rateLimits.cooldownBetweenBulk) {
      const remainingTime = Math.ceil((adminSecurity.rateLimits.cooldownBetweenBulk - (now - tracking.lastBulkOperation)) / 1000);
      return {
        allowed: false,
        reason: `Bulk operation cooldown active. Please wait ${remainingTime} seconds.`,
        remainingTime
      };
    }
    
    // Check daily bulk limit
    if (tracking.bulkOperationsLastDay.length >= adminSecurity.rateLimits.maxBulkOperationsPerDay) {
      return {
        allowed: false,
        reason: `Daily bulk operation limit reached (${adminSecurity.rateLimits.maxBulkOperationsPerDay}). Try again tomorrow.`
      };
    }
    
    tracking.bulkOperationsLastDay.push(now);
    tracking.lastBulkOperation = now;
  }
  
  // Check hourly operation limit
  if (tracking.operationsLastHour.length >= adminSecurity.rateLimits.maxOperationsPerHour) {
    tracking.warningCount++;
    return {
      allowed: false,
      reason: `Hourly operation limit reached (${adminSecurity.rateLimits.maxOperationsPerHour}). Please wait before performing more operations.`
    };
  }
  
  tracking.operationsLastHour.push(now);
  
  return { allowed: true };
}

function calculateProgressiveDelay(ip, baseDelay) {
  const tracking = adminSecurity.ipTracking[ip];
  if (!tracking) return baseDelay;
  
  const recentOperations = tracking.operationsLastHour.length;
  const progressiveFactor = Math.pow(adminSecurity.rateLimits.progressiveDelayFactor, Math.floor(recentOperations / 10));
  
  return Math.min(baseDelay * progressiveFactor, baseDelay * 5); // Max 5x the original delay
}

function requireAdvancedAuth(req, res, next) {
  // Check emergency stop
  if (adminSecurity.emergencyStop) {
    return res.status(503).json({ 
      error: 'All automation operations are temporarily suspended for security reasons.',
      code: 'EMERGENCY_STOP'
    });
  }
  
  // Basic auth check
  const auth = req.headers.authorization;
  if (!auth || auth !== `Bearer ${ADMIN_PASSWORD}`) {
    return res.status(401).json({ error: 'Unauthorized' });
  }
  
  // Enhanced security checks for automation endpoints
  const ip = getClientIP(req);
  const path = req.path;
  
  // Log the operation attempt
  logAdminOperation('AUTH_CHECK', ip, { path, userAgent: req.get('User-Agent') });
  
  next();
}

// HTML Template utilities for efficiency
// Enhanced HTML template system with caching and optimization
const templateUtils = {
  // Common HTML components for reusability
  components: {
    // Standard navigation component
    navigation(currentPage = '') {
      const pages = [
        { path: '/', label: 'Home' },
        { path: '/blog', label: 'Blog' },
        { path: '/admin', label: 'Admin' }
      ];
      
      return `
        <nav style="background: #333; padding: 1rem; margin-bottom: 2rem;">
          <div style="max-width: 800px; margin: 0 auto; display: flex; gap: 1rem;">
            ${pages.map(page => `
              <a href="${page.path}" style="color: ${currentPage === page.path ? '#4CAF50' : 'white'}; 
                 text-decoration: none; font-weight: ${currentPage === page.path ? 'bold' : 'normal'};">
                ${page.label}
              </a>
            `).join('')}
          </div>
        </nav>
      `;
    },

    // Experimental badge component
    experimentalBadge(text = 'EXPERIMENTAL') {
      return `
        <span class="experimental-badge">${text}</span>
      `;
    },

    // Loading spinner component
    loadingSpinner(text = 'Loading...') {
      return `
        <div class="loading-spinner" style="text-align: center; padding: 20px;">
          <div style="display: inline-block; width: 20px; height: 20px; border: 3px solid #f3f3f3; 
                      border-top: 3px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;"></div>
          <p style="margin-top: 10px;">${text}</p>
        </div>
      `;
    },

    // Standard button component
    button(text, onclick, className = 'btn-primary', disabled = false) {
      return `
        <button class="btn ${className}" onclick="${onclick}" ${disabled ? 'disabled' : ''}>
          ${text}
        </button>
      `;
    },

    // Form group component
    formGroup(label, input, helpText = '') {
      return `
        <div class="form-group">
          <label>${label}</label>
          ${input}
          ${helpText ? `<small style="color: #666;">${helpText}</small>` : ''}
        </div>
      `;
    }
  },

  // Optimized template generation with caching
  generateHTML(title, content, additionalCSS = '', additionalJS = '', useNav = false, currentPage = '') {
    const cacheKey = `template_${title}_${useNav}_${currentPage}`;
    
    // Check template cache
    let cachedTemplate = cacheUtils.get('templates', cacheKey, CONFIG.CACHE_DURATIONS.HTML_TEMPLATES);
    if (cachedTemplate && !additionalCSS && !additionalJS) {
      return cachedTemplate.replace('{{CONTENT}}', content);
    }

    const template = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${title}</title>
          <style>
              ${this.getOptimizedCSS()}
              ${additionalCSS}
          </style>
      </head>
      <body>
          ${useNav ? this.components.navigation(currentPage) : ''}
          {{CONTENT}}
          <script>
              ${this.getOptimizedJS()}
              ${additionalJS}
          </script>
      </body>
      </html>
    `;

    // Cache base template
    if (!additionalCSS && !additionalJS) {
      cacheUtils.set('templates', cacheKey, template);
    }

    return template.replace('{{CONTENT}}', content);
  },

  // Optimized CSS with better organization and compression
  getOptimizedCSS() {
    const cached = cacheUtils.get('staticContent', 'commonCSS', CONFIG.CACHE_DURATIONS.STATIC_CONTENT);
    if (cached) return cached;

    const css = `
      *{box-sizing:border-box}body{font-family:Arial,sans-serif;max-width:800px;margin:50px auto;padding:20px;background-color:#f5f5f5}
      .container{background-color:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1)}
      h1{color:#333;text-align:center;margin-bottom:30px}
      .experimental-badge{background:linear-gradient(45deg,#ff6b6b,#4ecdc4);color:white;padding:5px 10px;border-radius:15px;font-size:12px;font-weight:bold;display:inline-block;margin-left:10px;animation:pulse 2s infinite}
      @keyframes pulse{0%{opacity:1}50%{opacity:0.7}100%{opacity:1}}
      @keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
      .form-group{margin-bottom:20px}label{display:block;margin-bottom:5px;font-weight:bold;color:#555}
      input[type="text"],input[type="url"],textarea{width:100%;padding:12px;border:2px solid #ddd;border-radius:5px;font-size:16px}
      .btn{background:linear-gradient(45deg,#4CAF50,#45a049);color:white;padding:12px 24px;border:none;border-radius:5px;cursor:pointer;font-size:16px;font-weight:bold;transition:all 0.3s ease;text-decoration:none;display:inline-block;text-align:center}
      .btn:hover{transform:translateY(-2px);box-shadow:0 4px 8px rgba(0,0,0,0.2)}
      .btn-primary{background:linear-gradient(45deg,#007bff,#0056b3)}
      .btn-secondary{background:linear-gradient(45deg,#6c757d,#545b62)}
      .btn-success{background:linear-gradient(45deg,#28a745,#218838)}
      .btn-danger{background:linear-gradient(45deg,#dc3545,#c82333)}
      .btn:disabled{opacity:0.6;cursor:not-allowed;transform:none}
      .stats{display:grid;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:15px;margin-bottom:20px}
      .stat-card{background-color:#e9ecef;padding:15px;border-radius:8px;text-align:center}
      .stat-number{font-size:24px;font-weight:bold;color:#007bff}
      .stat-label{font-size:12px;color:#666;margin-top:5px}
      .warning{background-color:#fff3cd;border:1px solid #ffeaa7;color:#856404;padding:15px;border-radius:5px;margin:10px 0}
      .success{background-color:#d4edda;border:1px solid #c3e6cb;color:#155724;padding:15px;border-radius:5px;margin:10px 0}
      .error{background-color:#f8d7da;border:1px solid #f5c6cb;color:#721c24;padding:15px;border-radius:5px;margin:10px 0}
    `;

    cacheUtils.set('staticContent', 'commonCSS', css);
    return css;
  },

  // Optimized JavaScript with common utilities
  getOptimizedJS() {
    const cached = cacheUtils.get('staticContent', 'commonJS', CONFIG.CACHE_DURATIONS.STATIC_CONTENT);
    if (cached) return cached;

    const js = `
      function copyToClipboard(text){navigator.clipboard.writeText(text).then(()=>showMessage('Copied to clipboard!','success')).catch(()=>showMessage('Failed to copy','error'))}
      function showMessage(message,type='info'){const div=document.createElement('div');div.textContent=message;div.style.cssText='position:fixed;top:20px;right:20px;z-index:9999;padding:15px;border-radius:5px;color:white;background:'+(type==='error'?'#f44336':type==='success'?'#4CAF50':'#2196F3')+';animation:slideIn 0.3s ease';document.body.appendChild(div);setTimeout(()=>div.remove(),3000)}
      function toggleLoader(show,target='body'){const loader=document.querySelector('.loading-spinner');if(show&&!loader){const div=document.createElement('div');div.innerHTML='<div class="loading-spinner" style="text-align:center;padding:20px;"><div style="display:inline-block;width:20px;height:20px;border:3px solid #f3f3f3;border-top:3px solid #3498db;border-radius:50%;animation:spin 1s linear infinite;"></div><p style="margin-top:10px;">Loading...</p></div>';document.querySelector(target).appendChild(div.firstElementChild)}else if(!show&&loader){loader.remove()}}
      function debounce(func,wait){let timeout;return function executedFunction(...args){const later=()=>{clearTimeout(timeout);func(...args)};clearTimeout(timeout);timeout=setTimeout(later,wait)}}
      @keyframes slideIn{from{transform:translateX(100%)}to{transform:translateX(0)}}
    `;

    cacheUtils.set('staticContent', 'commonJS', js);
    return js;
  }
};

// Legacy compatibility functions (optimized)
function generateHTMLTemplate(title, content, additionalCSS = '', additionalJS = '') {
  return templateUtils.generateHTML(title, content, additionalCSS, additionalJS);
}

function getCommonCSS() {
  return templateUtils.getOptimizedCSS();
}

function getCommonJS() {
  return templateUtils.getOptimizedJS();
}



// Middleware to check admin authentication
function requireAuth(req, res, next) {
  const auth = req.headers.authorization;
  if (auth && auth === `Bearer ${ADMIN_PASSWORD}`) {
    next();
  } else {
    res.status(401).json({ error: 'Unauthorized' });
  }
}

// Routes

// Home page
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>URL Shortener</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 600px;
                margin: 50px auto;
                padding: 20px;
                background-color: #f5f5f5;
            }
            .container {
                background-color: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            h1 {
                color: #333;
                text-align: center;
                margin-bottom: 30px;
            }
            .experimental-badge {
                background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
                color: white;
                padding: 5px 10px;
                border-radius: 15px;
                font-size: 12px;
                font-weight: bold;
                display: inline-block;
                margin-left: 10px;
                animation: pulse 2s infinite;
            }
            @keyframes pulse {
                0% { opacity: 1; }
                50% { opacity: 0.7; }
                100% { opacity: 1; }
            }
            .form-group {
                margin-bottom: 20px;
            }
            label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
                color: #555;
            }
            input[type="url"], input[type="text"] {
                width: 100%;
                padding: 12px;
                border: 2px solid #ddd;
                border-radius: 5px;
                font-size: 16px;
                box-sizing: border-box;
            }
            input[type="url"]:focus, input[type="text"]:focus {
                border-color: #007bff;
                outline: none;
            }
            .custom-code-section {
                background-color: #f8f9fa;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 20px;
                border-left: 4px solid #007bff;
            }
            .custom-code-section h3 {
                margin-top: 0;
                color: #007bff;
                font-size: 16px;
            }
            .custom-code-help {
                font-size: 14px;
                color: #666;
                margin-top: 5px;
            }
            button {
                background-color: #007bff;
                color: white;
                padding: 12px 30px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
                width: 100%;
            }
            button:hover {
                background-color: #0056b3;
            }
            .result {
                margin-top: 20px;
                padding: 15px;
                background-color: #e7f3ff;
                border-radius: 5px;
                display: none;
            }
            .short-url {
                word-break: break-all;
                font-weight: bold;
                color: #007bff;
            }
            .result-actions {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 10px;
                margin-top: 15px;
            }
            .result-actions button {
                padding: 8px 16px;
                font-size: 14px;
            }
            .btn-secondary {
                background-color: #6c757d;
            }
            .btn-secondary:hover {
                background-color: #545b62;
            }
            .btn-success {
                background-color: #28a745;
            }
            .btn-success:hover {
                background-color: #218838;
            }
            .custom-badge {
                background-color: #28a745;
                color: white;
                padding: 2px 6px;
                border-radius: 3px;
                font-size: 11px;
                margin-left: 8px;
            }
            .qr-section {
                text-align: center;
                margin-top: 15px;
                display: none;
            }
            .qr-section img {
                border: 1px solid #ddd;
                border-radius: 8px;
                margin-top: 10px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🔗 URL Shortener<span class="experimental-badge">NEW FEATURES!</span></h1>
            
            <!-- Blog Link -->
            <div style="text-align: center; margin-bottom: 20px;">
                <a href="/blog" style="background: linear-gradient(45deg, #ff6b6b, #4ecdc4); color: white; padding: 10px 20px; border-radius: 25px; text-decoration: none; font-weight: bold; display: inline-block;">📝 Visit Our Blog</a>
            </div>
            
            <form id="urlForm">
                <div class="form-group">
                    <label for="originalUrl">Enter URL to shorten:</label>
                    <input type="url" id="originalUrl" name="originalUrl" placeholder="https://example.com" required>
                </div>
                
                <div class="custom-code-section">
                    <h3>🎯 Custom Short Code (Experimental)</h3>
                    <input type="text" id="customCode" name="customCode" placeholder="my-custom-link" maxlength="20">
                    <div class="custom-code-help">
                        Leave empty for auto-generated code, or create your own (3-20 characters, letters and numbers only)
                    </div>
                </div>
                
                <button type="submit">Shorten URL</button>
            </form>
            
            <div id="result" class="result">
                <p>Short URL: <span id="shortUrl" class="short-url"></span><span id="customBadge" class="custom-badge" style="display: none;">CUSTOM</span></p>
                <div class="result-actions">
                    <button onclick="copyToClipboard()" class="btn-success">📋 Copy URL</button>
                    <button onclick="showPreview()" class="btn-secondary">👀 Preview & Analytics</button>
                    <button onclick="showQR()" class="btn-secondary">📱 Show QR Code</button>
                    <button onclick="downloadQR()" class="btn-secondary">💾 Download QR</button>
                </div>
                <div id="qrSection" class="qr-section">
                    <h4>📱 QR Code</h4>
                    <img id="qrImage" alt="QR Code" width="150" height="150">
                </div>
            </div>
        </div>

        <script>
            let currentShortCode = '';
            
            document.getElementById('urlForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const originalUrl = document.getElementById('originalUrl').value;
                const customCode = document.getElementById('customCode').value.trim();
                
                try {
                    const response = await fetch('/shorten', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ originalUrl, customCode: customCode || undefined })
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok) {
                        currentShortCode = data.shortCode;
                        const shortUrl = window.location.origin + '/' + data.shortCode;
                        document.getElementById('shortUrl').textContent = shortUrl;
                        
                        // Show custom badge if it's a custom code
                        const customBadge = document.getElementById('customBadge');
                        if (data.isCustom) {
                            customBadge.style.display = 'inline';
                        } else {
                            customBadge.style.display = 'none';
                        }
                        
                        // Load QR code
                        const qrImage = document.getElementById('qrImage');
                        qrImage.src = \`https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=\${encodeURIComponent(shortUrl)}\`;
                        
                        document.getElementById('result').style.display = 'block';
                        document.getElementById('qrSection').style.display = 'none';
                    } else {
                        alert('Error: ' + data.error);
                    }
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            });

            function copyToClipboard() {
                const shortUrl = document.getElementById('shortUrl').textContent;
                navigator.clipboard.writeText(shortUrl).then(() => {
                    alert('Short URL copied to clipboard!');
                });
            }
            
            function showPreview() {
                window.open('/preview/' + currentShortCode, '_blank');
            }
            
            function showQR() {
                const qrSection = document.getElementById('qrSection');
                qrSection.style.display = qrSection.style.display === 'none' ? 'block' : 'none';
            }
            
            function downloadQR() {
                const shortUrl = document.getElementById('shortUrl').textContent;
                const qrUrl = \`https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=\${encodeURIComponent(shortUrl)}\`;
                
                const link = document.createElement('a');
                link.href = qrUrl;
                link.download = \`qr-code-\${currentShortCode}.png\`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        </script>
    </body>
    </html>
  `);
});

// Shorten URL endpoint
app.post('/shorten', (req, res) => {
  try {
    const { originalUrl, customCode } = req.body;
    
    // Validate input using utility function
    const validationErrors = validateInput({
      originalUrl: { required: true, type: 'string' }
    }, req.body);
    
    if (validationErrors.length > 0) {
      return sendError(res, validationErrors.join(', '));
    }
    
    // Validate URL
    if (!isValidUrl(originalUrl)) {
      return sendError(res, 'Please provide a valid URL');
    }
    
    // Check if custom code is provided and validate it
    if (customCode) {
      if (!/^[a-zA-Z0-9]{3,20}$/.test(customCode)) {
        return sendError(res, 'Custom code must be 3-20 characters long and contain only letters and numbers');
      }
      
      // Check if custom code already exists
      if (urlDatabase[customCode]) {
        return sendError(res, 'Custom code already exists. Please choose a different one.', 409);
      }
      
      // Use custom code
      urlDatabase[customCode] = originalUrl;
      return sendSuccess(res, { shortCode: customCode, originalUrl, isCustom: true });
    }
    
    // Check if URL already exists (for auto-generated codes only)
    for (const [shortCode, url] of Object.entries(urlDatabase)) {
      if (url === originalUrl) {
        return sendSuccess(res, { shortCode, originalUrl, isCustom: false });
      }
    }
    
    // Generate unique short code
    let shortCode;
    do {
      shortCode = generateShortCode();
    } while (urlDatabase[shortCode]);
    
    // Store the mapping
    urlDatabase[shortCode] = originalUrl;
    
    sendSuccess(res, { shortCode, originalUrl, isCustom: false });
  } catch (error) {
    createErrorHandler('shorten')(error, req, res, () => {});
  }
});

// QR Code generation endpoint
app.get('/qr/:shortCode', (req, res) => {
  const { shortCode } = req.params;
  const originalUrl = urlDatabase[shortCode];
  
  if (!originalUrl) {
    return res.status(404).json({ error: 'Short code not found' });
  }
  
  const shortUrl = `${req.protocol}://${req.get('host')}/${shortCode}`;
  const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(shortUrl)}`;
  
  res.json({ 
    shortCode, 
    originalUrl, 
    shortUrl,
    qrCodeUrl: qrApiUrl 
  });
});

// URL Preview endpoint (before redirect)
app.get('/preview/:shortCode', (req, res) => {
  const { shortCode } = req.params;
  const originalUrl = urlDatabase[shortCode];
  
  if (!originalUrl) {
    return res.status(404).send(`
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>URL Not Found</title>
          <style>
              body {
                  font-family: Arial, sans-serif;
                  max-width: 600px;
                  margin: 50px auto;
                  padding: 20px;
                  text-align: center;
                  background-color: #f5f5f5;
              }
              .container {
                  background-color: white;
                  padding: 30px;
                  border-radius: 10px;
                  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
              }
              h1 {
                  color: #dc3545;
              }
              a {
                  color: #007bff;
                  text-decoration: none;
              }
              a:hover {
                  text-decoration: underline;
              }
          </style>
      </head>
      <body>
          <div class="container">
              <h1>404 - URL Not Found</h1>
              <p>The short URL you're looking for doesn't exist.</p>
              <a href="/">← Go back to create a new short URL</a>
          </div>
      </body>
      </html>
    `);
  }
  
  const analytics = urlAnalytics[shortCode] || { clicks: 0, firstClick: null, lastClick: null };
  const shortUrl = `${req.protocol}://${req.get('host')}/${shortCode}`;
  
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>URL Preview - ${shortCode}</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 50px auto;
                padding: 20px;
                background-color: #f5f5f5;
            }
            .container {
                background-color: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            h1 {
                color: #333;
                text-align: center;
                margin-bottom: 30px;
            }
            .preview-info {
                background-color: #f8f9fa;
                padding: 20px;
                border-radius: 8px;
                margin-bottom: 20px;
            }
            .url-info {
                margin-bottom: 15px;
            }
            .label {
                font-weight: bold;
                color: #555;
            }
            .url {
                word-break: break-all;
                color: #007bff;
            }
            .stats {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 15px;
                margin-bottom: 20px;
            }
            .stat-card {
                background-color: #e9ecef;
                padding: 15px;
                border-radius: 8px;
                text-align: center;
            }
            .stat-number {
                font-size: 24px;
                font-weight: bold;
                color: #007bff;
            }
            .stat-label {
                font-size: 12px;
                color: #666;
                margin-top: 5px;
            }
            .action-buttons {
                display: flex;
                gap: 15px;
                justify-content: center;
                flex-wrap: wrap;
            }
            .btn {
                padding: 12px 24px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
                text-decoration: none;
                display: inline-block;
                text-align: center;
                transition: background-color 0.3s;
            }
            .btn-primary {
                background-color: #007bff;
                color: white;
            }
            .btn-primary:hover {
                background-color: #0056b3;
            }
            .btn-secondary {
                background-color: #6c757d;
                color: white;
            }
            .btn-secondary:hover {
                background-color: #545b62;
            }
            .btn-success {
                background-color: #28a745;
                color: white;
            }
            .btn-success:hover {
                background-color: #218838;
            }
            .warning {
                background-color: #fff3cd;
                border: 1px solid #ffeaa7;
                color: #856404;
                padding: 15px;
                border-radius: 5px;
                margin-bottom: 20px;
            }
            .qr-code {
                text-align: center;
                margin: 20px 0;
            }
            .qr-code img {
                border: 1px solid #ddd;
                border-radius: 8px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🔗 URL Preview</h1>
            
            <div class="warning">
                <strong>🛡️ Security Notice:</strong> You are about to visit an external website. Please verify the URL below before proceeding.
            </div>
            
            <div class="preview-info">
                <div class="url-info">
                    <span class="label">Short URL:</span><br>
                    <span class="url">${shortUrl}</span>
                </div>
                <div class="url-info">
                    <span class="label">Destination URL:</span><br>
                    <span class="url">${originalUrl}</span>
                </div>
            </div>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number">${analytics.clicks}</div>
                    <div class="stat-label">Total Clicks</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${analytics.firstClick ? new Date(analytics.firstClick).toLocaleDateString() : 'Never'}</div>
                    <div class="stat-label">First Clicked</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${analytics.lastClick ? new Date(analytics.lastClick).toLocaleDateString() : 'Never'}</div>
                    <div class="stat-label">Last Clicked</div>
                </div>
            </div>
            
            <div class="qr-code">
                <h3>QR Code</h3>
                <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(shortUrl)}" alt="QR Code for ${shortUrl}">
            </div>
            
            <div class="action-buttons">
                <a href="${originalUrl}" class="btn btn-primary">🔗 Continue to Website</a>
                <a href="/${shortCode}" class="btn btn-secondary">➡️ Direct Redirect</a>
                <button onclick="copyToClipboard('${shortUrl}')" class="btn btn-success">📋 Copy Short URL</button>
                <a href="/" class="btn btn-secondary">🏠 Create New URL</a>
            </div>
        </div>
        
        <script>
            function copyToClipboard(text) {
                navigator.clipboard.writeText(text).then(() => {
                    alert('Short URL copied to clipboard!');
                });
            }
        </script>
    </body>
    </html>
  `);
});
app.get('/admin', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Admin Login - URL Shortener</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 400px;
                margin: 50px auto;
                padding: 20px;
                background-color: #f5f5f5;
            }
            .container {
                background-color: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            h1 {
                color: #333;
                text-align: center;
                margin-bottom: 30px;
            }
            .form-group {
                margin-bottom: 20px;
            }
            label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
                color: #555;
            }
            input[type="password"] {
                width: 100%;
                padding: 12px;
                border: 2px solid #ddd;
                border-radius: 5px;
                font-size: 16px;
                box-sizing: border-box;
            }
            input[type="password"]:focus {
                border-color: #007bff;
                outline: none;
            }
            button {
                background-color: #007bff;
                color: white;
                padding: 12px 30px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
                width: 100%;
            }
            button:hover {
                background-color: #0056b3;
            }
            .error {
                color: #dc3545;
                margin-top: 10px;
                text-align: center;
            }
            .back-link {
                text-align: center;
                margin-top: 20px;
            }
            .back-link a {
                color: #007bff;
                text-decoration: none;
            }
            .back-link a:hover {
                text-decoration: underline;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🔐 Admin Login</h1>
            <form id="loginForm">
                <div class="form-group">
                    <label for="password">Admin Password:</label>
                    <input type="password" id="password" name="password" required>
                </div>
                <button type="submit">Login</button>
                <div id="error" class="error" style="display: none;"></div>
            </form>
            <div class="back-link">
                <a href="/">← Back to URL Shortener</a>
            </div>
        </div>

        <script>
            document.getElementById('loginForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const password = document.getElementById('password').value;
                
                try {
                    const response = await fetch('/admin/login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ password })
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok) {
                        localStorage.setItem('adminToken', data.token);
                        window.location.href = '/admin/dashboard';
                    } else {
                        document.getElementById('error').textContent = data.error;
                        document.getElementById('error').style.display = 'block';
                    }
                } catch (error) {
                    document.getElementById('error').textContent = 'Login failed';
                    document.getElementById('error').style.display = 'block';
                }
            });
        </script>
    </body>
    </html>
  `);
});

// Admin login endpoint
app.post('/admin/login', (req, res) => {
  const { password } = req.body;
  
  if (password === ADMIN_PASSWORD) {
    res.json({ token: ADMIN_PASSWORD, message: 'Login successful' });
  } else {
    res.status(401).json({ error: 'Invalid password' });
  }
});

// Admin dashboard
app.get('/admin/dashboard', (req, res) => {
  res.send(`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - URL Shortener</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
        .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; }
        .header h1 { color: #333; margin: 0; }
        .refresh-btn { background: #28a745; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; text-decoration: none; }
        .logout-btn { background: #dc3545; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; text-decoration: none; }
        .container { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .stat-item { background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .stat-number { font-size: 32px; font-weight: bold; color: #007bff; }
        
        /* Enhanced Automation Panel Styles */
        .experimental-badge { 
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4); 
            color: white; 
            padding: 5px 10px; 
            border-radius: 15px; 
            font-size: 12px; 
            margin-left: 10px; 
        }
        
        .automation-tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 2px solid #e9ecef;
        }
        
        .tab-btn {
            background: none;
            border: none;
            padding: 15px 20px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: #6c757d;
            border-bottom: 2px solid transparent;
            transition: all 0.3s ease;
        }
        
        .tab-btn:hover {
            color: #007bff;
            background: #f8f9fa;
        }
        
        .tab-btn.active {
            color: #007bff;
            border-bottom-color: #007bff;
            background: #f8f9fa;
        }
        
        .automation-tab {
            display: none;
        }
        
        .automation-tab.active {
            display: block;
        }
        
        .automation-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .automation-card {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 12px;
            border: 1px solid #e9ecef;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        .automation-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        
        .automation-card h3 {
            margin-top: 0;
            color: #343a40;
            font-size: 18px;
            margin-bottom: 20px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #495057;
        }
        
        .form-group input, .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.2s ease;
            box-sizing: border-box;
        }
        
        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #007bff;
        }
        
        .range-slider {
            margin-top: 10px;
        }
        
        .range-slider input[type="range"] {
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: #e9ecef;
            outline: none;
        }
        
        .security-notice {
            color: #e74c3c;
            font-size: 12px;
            display: block;
            margin-top: 5px;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            text-decoration: none;
            display: inline-block;
            transition: all 0.2s ease;
        }
        
        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        }
        
        .btn-success { background: #28a745; color: white; }
        .btn-primary { background: #007bff; color: white; }
        .btn-danger { background: #dc3545; color: white; }
        .btn-secondary { background: #6c757d; color: white; }
        .btn-info { background: #17a2b8; color: white; }
        
        .progress-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-size: 14px;
        }
        
        .progress-bar-container {
            background: #e9ecef;
            border-radius: 10px;
            height: 20px;
            position: relative;
            margin-bottom: 15px;
        }
        
        .progress-bar {
            background: linear-gradient(45deg, #28a745, #20c997);
            height: 100%;
            border-radius: 10px;
            width: 0%;
            transition: width 0.3s ease;
        }
        
        #progressPercent {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 12px;
            font-weight: 600;
            color: #343a40;
        }
        
        .stats-row {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .stat {
            text-align: center;
            padding: 10px;
            background: white;
            border-radius: 6px;
            border: 1px solid #e9ecef;
        }
        
        .stat label {
            display: block;
            font-size: 12px;
            color: #6c757d;
            margin-bottom: 5px;
        }
        
        .stat span {
            font-size: 16px;
            font-weight: 600;
            color: #343a40;
        }
        
        .advanced-settings {
            background: #fff;
            padding: 25px;
            border-radius: 12px;
            border: 1px solid #e9ecef;
            margin-top: 30px;
        }
        
        .advanced-settings h3 {
            margin-top: 0;
            color: #343a40;
            margin-bottom: 20px;
        }
        
        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }
        
        .setting-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #495057;
        }
        
        .templates-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .template-card {
            background: white;
            padding: 20px;
            border-radius: 12px;
            border: 2px solid #e9ecef;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .template-card:hover {
            border-color: #007bff;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,123,255,0.15);
        }
        
        .template-card h4 {
            margin-top: 0;
            color: #343a40;
            margin-bottom: 10px;
        }
        
        .template-card p {
            color: #6c757d;
            font-size: 14px;
            margin-bottom: 15px;
        }
        
        .template-stats {
            background: #f8f9fa;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            color: #495057;
        }
        
        .custom-template {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
            border: 2px dashed #dee2e6;
        }
        
        .custom-template h4 {
            margin-top: 0;
            color: #343a40;
            margin-bottom: 15px;
        }
        
        .form-row {
            display: flex;
            gap: 15px;
            align-items: end;
        }
        
        .form-row input {
            flex: 1;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            font-size: 14px;
        }
        
        .scheduler-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }
        
        .schedule-card {
            background: white;
            padding: 25px;
            border-radius: 12px;
            border: 1px solid #e9ecef;
        }
        
        .schedule-card h4 {
            margin-top: 0;
            color: #343a40;
            margin-bottom: 20px;
        }
        
        .task-item {
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 10px;
            border-left: 4px solid #007bff;
        }
        
        .analytics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .analytics-card {
            background: white;
            padding: 25px;
            border-radius: 12px;
            border: 1px solid #e9ecef;
        }
        
        .analytics-card h4 {
            margin-top: 0;
            color: #343a40;
            margin-bottom: 20px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
        }
        
        .stat-item {
            text-align: center;
            padding: 15px 10px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .stat-number {
            font-size: 24px;
            font-weight: 700;
            color: #007bff;
            margin-bottom: 5px;
        }
        
        .stat-label {
            font-size: 12px;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .performance-metrics {
            space-y: 15px;
        }
        
        .metric {
            display: flex;
            justify-content: space-between;
            padding: 12px 0;
            border-bottom: 1px solid #f8f9fa;
        }
        
        .metric label {
            font-weight: 600;
            color: #495057;
        }
        
        .metric span {
            color: #007bff;
            font-weight: 500;
        }
        
        .export-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
            margin-top: 20px;
        }
        
        .export-section h4 {
            margin-top: 0;
            color: #343a40;
            margin-bottom: 15px;
        }
        
        .export-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .status-panel {
            background: #e7f3ff;
            padding: 20px;
            border-radius: 12px;
            margin-top: 20px;
            border-left: 4px solid #007bff;
            display: none;
        }
        
        .status-panel.success {
            background: #d4edda;
            border-left-color: #28a745;
        }
        
        .status-panel.error {
            background: #f8d7da;
            border-left-color: #dc3545;
        }
        
        .status-panel.info {
            background: #d1ecf1;
            border-left-color: #17a2b8;
        }
        
        #statusMessage {
            font-weight: 600;
            color: #343a40;
            margin-bottom: 5px;
        }
        
        #statusDetails {
            font-size: 14px;
            color: #6c757d;
        }
        
        @media (max-width: 768px) {
            .automation-grid {
                grid-template-columns: 1fr;
            }
            
            .templates-grid {
                grid-template-columns: 1fr;
            }
            
            .scheduler-grid {
                grid-template-columns: 1fr;
            }
            
            .analytics-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-row {
                grid-template-columns: 1fr;
            }
            
            .settings-grid {
                grid-template-columns: 1fr;
            }
            
            .export-buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🛠️ Admin Dashboard</h1>
        <div>
            <a href="/admin/blog" class="refresh-btn" style="background-color: #007bff; margin-right: 10px;">📝 Blog Management</a>
            <button class="refresh-btn" onclick="showAutomation()" style="background-color: #ff6b6b; margin-right: 10px;">🤖 Automation</button>
            <button class="refresh-btn" onclick="showSecurityDashboard()" style="background-color: #e74c3c; margin-right: 10px;">🛡️ Security</button>
            <button class="refresh-btn" onclick="showSafelinkSettings()" style="background-color: #28a745; margin-right: 10px;">🔗 SafeLink</button>
            <button class="refresh-btn" onclick="loadUrls()">Refresh</button>
            <a href="/admin" class="logout-btn" onclick="logout()">Logout</a>
        </div>
    </div>

    <div class="stats">
        <div class="stat-item">
            <div class="stat-number" id="totalUrls">0</div>
            <div>Total URLs</div>
        </div>
        <div class="stat-item">
            <div class="stat-number" id="totalClicks">0</div>
            <div>Total Clicks</div>
        </div>
        <div class="stat-item">
            <div class="stat-number" id="avgClicks">0</div>
            <div>Avg Clicks/URL</div>
        </div>
    </div>

    <!-- SafeLink Settings Panel (Hidden by default) -->
    <div class="container" id="safelinkSettings" style="display: none;">
        <h2>🔗 SafeLink Configuration <span style="background: linear-gradient(45deg, #28a745, #20c997); color: white; padding: 4px 8px; border-radius: 12px; font-size: 12px; margin-left: 10px;">💰 10X EARNING</span></h2>
        <p style="color: #666; margin-bottom: 20px;">Configure custom SafeLink pages (1-8) with advanced ad slots for maximum revenue generation.</p>
        
        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="margin-top: 0; color: #495057;">🌍 Global Settings</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                <div>
                    <label style="display: block; margin-bottom: 5px; font-weight: bold;">SafeLink System:</label>
                    <select id="safelinkEnabled" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                        <option value="false">Disabled</option>
                        <option value="true">Enabled</option>
                    </select>
                </div>
                <div>
                    <label style="display: block; margin-bottom: 5px; font-weight: bold;">Default Template:</label>
                    <select id="defaultTemplate" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                        <option value="1">SafeLink 1 - Classic</option>
                        <option value="2">SafeLink 2 - Premium</option>
                        <option value="3">SafeLink 3 - Gaming</option>
                        <option value="4">SafeLink 4 - Tech</option>
                        <option value="5">SafeLink 5 - Business</option>
                        <option value="6">SafeLink 6 - Entertainment</option>
                        <option value="7">SafeLink 7 - News</option>
                        <option value="8">SafeLink 8 - Lifestyle</option>
                    </select>
                </div>
            </div>
            <div style="text-align: center; margin-top: 15px;">
                <button onclick="saveSafelinkGlobalSettings()" style="background-color: #28a745; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">💾 Save Global Settings</button>
            </div>
        </div>
        
        <div style="text-align: center;">
            <button onclick="hideSafelinkSettings()" style="background-color: #6c757d; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">Close SafeLink Settings</button>
        </div>
    </div>

    <script>
        // SafeLink Configuration Functions
        function showSafelinkSettings() {
            hideAllPanels();
            document.getElementById('safelinkSettings').style.display = 'block';
            document.getElementById('safelinkSettings').scrollIntoView({ behavior: 'smooth' });
            loadSafelinkSettings();
        }

        function hideSafelinkSettings() {
            document.getElementById('safelinkSettings').style.display = 'none';
        }

        async function loadSafelinkSettings() {
            try {
                const token = localStorage.getItem('adminToken');
                const response = await fetch('/admin/api/safelink/config', {
                    headers: { 'Authorization': 'Bearer ' + token }
                });

                if (response.ok) {
                    const config = await response.json();
                    document.getElementById('safelinkEnabled').value = config.enabled;
                    document.getElementById('defaultTemplate').value = config.defaultTemplate;
                }
            } catch (error) {
                console.error('Error loading safelink settings:', error);
            }
        }

        async function saveSafelinkGlobalSettings() {
            try {
                const token = localStorage.getItem('adminToken');
                const settings = {
                    enabled: document.getElementById('safelinkEnabled').value === 'true',
                    defaultTemplate: parseInt(document.getElementById('defaultTemplate').value)
                };

                const response = await fetch('/admin/api/safelink/config', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token
                    },
                    body: JSON.stringify(settings)
                });

                if (response.ok) {
                    alert('Global SafeLink settings saved successfully!');
                } else {
                    alert('Error saving settings');
                }
            } catch (error) {
                console.error('Error saving global settings:', error);
                alert('Error saving settings');
            }
        }

        function hideAllPanels() {
            document.getElementById('safelinkSettings').style.display = 'none';
        }

        function showAutomation() { 
            // Hide all other panels first
            document.getElementById('safelinkSettings').style.display = 'none';
            
            // Toggle automation panel
            let panel = document.getElementById('automationPanel');
            if (!panel) {
                // Create automation panel if it doesn't exist
                panel = document.createElement('div');
                panel.id = 'automationPanel';
                panel.className = 'container';
                
                // Build the HTML content as a string
                const htmlContent = 
                    '<h2>🤖 Advanced Automation Control Center <span class="experimental-badge">ENHANCED</span></h2>' +
                    '<p>Comprehensive automation tools for URL clicks and analytics generation with enterprise-grade security controls.</p>' +
                    '<div class="automation-tabs">' +
                        '<button class="tab-btn active" onclick="showAutomationTab(\'url-automation\')">🎯 URL Automation</button>' +
                        '<button class="tab-btn" onclick="showAutomationTab(\'templates\')">📋 Templates</button>' +
                        '<button class="tab-btn" onclick="showAutomationTab(\'scheduler\')">⏰ Scheduler</button>' +
                        '<button class="tab-btn" onclick="showAutomationTab(\'analytics\')">📊 Analytics</button>' +
                    '</div>' +
                    '<!-- URL Automation Tab -->' +
                    '<div id="url-automation" class="automation-tab active">' +
                        '<div class="automation-grid">' +
                            '<!-- Single URL Automation -->' +
                            '<div class="automation-card">' +
                                '<h3>🎯 Single URL Automation</h3>' +
                                '<div class="form-group">' +
                                    '<label>Target URL:</label>' +
                                    '<select id="targetUrl">' +
                                        '<option value="">Select URL...</option>' +
                                    '</select>' +
                                '</div>' +
                                '<div class="form-group">' +
                                    '<label>Click Count:</label>' +
                                    '<input type="number" id="clickCount" value="10" min="1" max="1000">' +
                                    '<div class="range-slider">' +
                                        '<input type="range" id="clickRange" min="1" max="1000" value="10" oninput="updateClickCount()">' +
                                    '</div>' +
                                '</div>' +
                                '<div class="form-group">' +
                                    '<label>Delay (ms):</label>' +
                                    '<input type="number" id="clickDelay" value="200" min="10" max="5000">' +
                                '</div>' +
                                '<div class="form-group">' +
                                    '<label>Automation Pattern:</label>' +
                                    '<select id="automationPattern">' +
                                        '<option value="steady">Steady Rate</option>' +
                                        '<option value="burst">Burst Mode</option>' +
                                        '<option value="organic">Organic Pattern</option>' +
                                        '<option value="random">Random Intervals</option>' +
                                    '</select>' +
                                '</div>' +
                                '<button class="btn btn-success" onclick="generateSingleClicks()">🚀 Start Generation</button>' +
                            '</div>' +
                            '<!-- Bulk Automation -->' +
                            '<div class="automation-card">' +
                                '<h3>⚡ Bulk URL Automation</h3>' +
                                '<div class="form-group">' +
                                    '<label>Clicks per URL:</label>' +
                                    '<input type="number" id="bulkClickCount" value="5" min="1" max="50">' +
                                    '<small class="security-notice">⚠️ Max 50 per URL (Security Enhanced)</small>' +
                                '</div>' +
                                '<div class="form-group">' +
                                    '<label>Target URLs:</label>' +
                                    '<select id="bulkTarget">' +
                                        '<option value="all">All URLs</option>' +
                                        '<option value="recent">Recent URLs (Last 10)</option>' +
                                        '<option value="popular">Most Clicked URLs</option>' +
                                        '<option value="custom">Custom Selection</option>' +
                                    '</select>' +
                                '</div>' +
                                '<div class="form-group">' +
                                    '<label>Execution Mode:</label>' +
                                    '<select id="executionMode">' +
                                        '<option value="sequential">Sequential</option>' +
                                        '<option value="parallel">Parallel</option>' +
                                        '<option value="intelligent">Intelligent Queue</option>' +
                                    '</select>' +
                                '</div>' +
                                '<button class="btn btn-primary" onclick="generateBulkClicks()">🔥 Start Bulk Generation</button>' +
                            '</div>' +
                            '<!-- Real-time Progress -->' +
                            '<div class="automation-card">' +
                                '<h3>📊 Live Progress Monitor</h3>' +
                                '<div id="progressContainer">' +
                                    '<div class="progress-item">' +
                                        '<span>Current Operation:</span>' +
                                        '<span id="currentOperation">Idle</span>' +
                                    '</div>' +
                                    '<div class="progress-bar-container">' +
                                        '<div class="progress-bar" id="mainProgressBar"></div>' +
                                        '<span id="progressPercent">0%</span>' +
                                    '</div>' +
                                    '<div class="stats-row">' +
                                        '<div class="stat">' +
                                            '<label>Generated:</label>' +
                                            '<span id="generatedCount">0</span>' +
                                        '</div>' +
                                        '<div class="stat">' +
                                            '<label>Remaining:</label>' +
                                            '<span id="remainingCount">0</span>' +
                                        '</div>' +
                                        '<div class="stat">' +
                                            '<label>Rate:</label>' +
                                            '<span id="generationRate">0/min</span>' +
                                        '</div>' +
                                    '</div>' +
                                    '<button class="btn btn-danger" id="stopBtn" onclick="stopAutomation()" style="display: none;">⏹️ Stop</button>' +
                                '</div>' +
                            '</div>' +
                        '</div>' +
                        '<!-- Advanced Settings -->' +
                        '<div class="advanced-settings" id="advancedSettings">' +
                            '<h3>🔧 Advanced Configuration</h3>' +
                            '<div class="settings-grid">' +
                                '<div class="setting-group">' +
                                    '<label>User Agent Simulation:</label>' +
                                    '<select id="userAgentMode">' +
                                        '<option value="default">Default Mix</option>' +
                                        '<option value="mobile">Mobile Only</option>' +
                                        '<option value="desktop">Desktop Only</option>' +
                                        '<option value="custom">Custom List</option>' +
                                    '</select>' +
                                '</div>' +
                                '<div class="setting-group">' +
                                    '<label>IP Simulation:</label>' +
                                    '<select id="ipSimulation">' +
                                        '<option value="random">Random IPs</option>' +
                                        '<option value="geographic">Geographic Distribution</option>' +
                                        '<option value="static">Static IP Pool</option>' +
                                    '</select>' +
                                '</div>' +
                                '<div class="setting-group">' +
                                    '<label>Security Level:</label>' +
                                    '<select id="securityLevel">' +
                                        '<option value="standard">Standard</option>' +
                                        '<option value="enhanced">Enhanced</option>' +
                                        '<option value="maximum">Maximum Security</option>' +
                                    '</select>' +
                                '</div>' +
                            '</div>' +
                        '</div>' +
                    '</div>' +
                    '<!-- Templates Tab -->' +
                    '<div id="templates" class="automation-tab">' +
                        '<div class="templates-container">' +
                            '<h3>📋 Automation Templates</h3>' +
                            '<div class="templates-grid">' +
                                '<div class="template-card" onclick="applyTemplate(\'social-boost\')">' +
                                    '<h4>📱 Social Media Boost</h4>' +
                                    '<p>Optimized for social media sharing with organic patterns</p>' +
                                    '<div class="template-stats">10-50 clicks, Organic pattern, 1-3s delays</div>' +
                                '</div>' +
                                '<div class="template-card" onclick="applyTemplate(\'viral-simulation\')">' +
                                    '<h4>🔥 Viral Content Simulation</h4>' +
                                    '<p>Simulates viral content spread with burst patterns</p>' +
                                    '<div class="template-stats">100-500 clicks, Burst mode, Variable timing</div>' +
                                '</div>' +
                                '<div class="template-card" onclick="applyTemplate(\'steady-growth\')">' +
                                    '<h4>📈 Steady Growth</h4>' +
                                    '<p>Consistent growth pattern for long-term testing</p>' +
                                    '<div class="template-stats">20-100 clicks, Steady rate, 2s intervals</div>' +
                                '</div>' +
                                '<div class="template-card" onclick="applyTemplate(\'stress-test\')">' +
                                    '<h4>⚡ Stress Testing</h4>' +
                                    '<p>High-volume testing for performance validation</p>' +
                                    '<div class="template-stats">500-1000 clicks, Fast rate, Min delays</div>' +
                                '</div>' +
                            '</div>' +
                            '<div class="custom-template">' +
                                '<h4>🎨 Create Custom Template</h4>' +
                                '<div class="form-row">' +
                                    '<input type="text" id="templateName" placeholder="Template Name">' +
                                    '<button class="btn btn-success" onclick="saveTemplate()">💾 Save Template</button>' +
                                '</div>' +
                            '</div>' +
                        '</div>' +
                    '</div>' +
                    '<!-- Status Panel -->' +
                    '<div id="automationStatus" class="status-panel">' +
                        '<div id="statusMessage"></div>' +
                        '<div id="statusDetails"></div>' +
                    '</div>';
                
                panel.innerHTML = htmlContent;
                
                // Insert panel after stats section
                const statsSection = document.querySelector('.stats');
                statsSection.parentNode.insertBefore(panel, statsSection.nextSibling);
                
                // Load initial data
                loadAutomationData();
            }
            
            panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
        }
        
        function showSecurityDashboard() { alert('Security dashboard not implemented in this version'); }
        function loadUrls() { alert('URL loading not implemented in this version'); }
        function logout() { localStorage.removeItem('adminToken'); window.location.href = '/admin'; }
        
        // Enhanced Automation Functions
        let automationState = {
            isRunning: false,
            currentOperation: null,
            progress: 0,
            generated: 0,
            total: 0,
            startTime: null,
            templates: {}
        };
        
        function showAutomationTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.automation-tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            
            // Show selected tab
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }
        
        function loadAutomationData() {
            // Load URLs for dropdown
            fetch('/admin/api/urls', {
                headers: { 'Authorization': 'Bearer ' + localStorage.getItem('adminToken') }
            })
            .then(response => response.json())
            .then(urls => {
                const targetSelect = document.getElementById('targetUrl');
                targetSelect.innerHTML = '<option value="">Select URL...</option>';
                
                Object.keys(urls).forEach(shortCode => {
                    const option = document.createElement('option');
                    option.value = shortCode;
                    option.textContent = `${shortCode} → ${urls[shortCode].substring(0, 50)}...`;
                    targetSelect.appendChild(option);
                });
            })
            .catch(error => console.error('Error loading URLs:', error));
            
            // Load analytics data
            loadAutomationAnalytics();
        }
        
        function updateClickCount() {
            const range = document.getElementById('clickRange');
            const input = document.getElementById('clickCount');
            input.value = range.value;
        }
        
        function generateSingleClicks() {
            const shortCode = document.getElementById('targetUrl').value;
            const clickCount = parseInt(document.getElementById('clickCount').value);
            const delay = parseInt(document.getElementById('clickDelay').value);
            const pattern = document.getElementById('automationPattern').value;
            
            if (!shortCode) {
                alert('Please select a URL');
                return;
            }
            
            if (automationState.isRunning) {
                alert('Another automation is already running');
                return;
            }
            
            startAutomation();
            automationState.currentOperation = 'Single URL Generation';
            automationState.total = clickCount;
            automationState.generated = 0;
            
            const actualDelay = calculatePatternDelay(delay, pattern);
            
            fetch('/admin/api/automation/generate-clicks', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + localStorage.getItem('adminToken')
                },
                body: JSON.stringify({
                    shortCode,
                    clickCount,
                    delay: actualDelay,
                    pattern
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    throw new Error(data.error);
                }
                showStatus('success', 'Started generating ' + clickCount + ' clicks for ' + shortCode);
                simulateProgress(clickCount, actualDelay);
            })
            .catch(error => {
                showStatus('error', 'Error: ' + error.message);
                stopAutomation();
            });
        }
        
        function generateBulkClicks() {
            const clicksPerUrl = parseInt(document.getElementById('bulkClickCount').value);
            const target = document.getElementById('bulkTarget').value;
            const mode = document.getElementById('executionMode').value;
            
            if (automationState.isRunning) {
                alert('Another automation is already running');
                return;
            }
            
            if (!confirm('Start bulk generation of ' + clicksPerUrl + ' clicks per URL?')) {
                return;
            }
            
            startAutomation();
            automationState.currentOperation = 'Bulk URL Generation';
            
            fetch('/admin/api/automation/generate-bulk-clicks', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + localStorage.getItem('adminToken')
                },
                body: JSON.stringify({
                    clicksPerUrl,
                    target,
                    mode,
                    delay: 200
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    throw new Error(data.error);
                }
                const totalClicks = data.estimatedTotal || (clicksPerUrl * 10); // Fallback estimation
                automationState.total = totalClicks;
                showStatus('success', 'Started bulk generation: ' + data.message);
                simulateProgress(totalClicks, 200);
            })
            .catch(error => {
                showStatus('error', 'Error: ' + error.message);
                stopAutomation();
            });
        }
        
        function calculatePatternDelay(baseDelay, pattern) {
            switch(pattern) {
                case 'burst': return Math.max(baseDelay * 0.3, 50);
                case 'organic': return baseDelay + Math.random() * baseDelay;
                case 'random': return baseDelay + Math.random() * baseDelay * 2;
                default: return baseDelay;
            }
        }
        
        function startAutomation() {
            automationState.isRunning = true;
            automationState.startTime = Date.now();
            automationState.generated = 0;
            
            document.getElementById('currentOperation').textContent = automationState.currentOperation;
            document.getElementById('stopBtn').style.display = 'block';
            updateProgress();
        }
        
        function stopAutomation() {
            automationState.isRunning = false;
            automationState.currentOperation = 'Idle';
            
            document.getElementById('currentOperation').textContent = 'Idle';
            document.getElementById('stopBtn').style.display = 'none';
            
            // Send stop request to server
            fetch('/admin/api/automation/stop', {
                method: 'POST',
                headers: { 'Authorization': 'Bearer ' + localStorage.getItem('adminToken') }
            }).catch(error => console.error('Error stopping automation:', error));
        }
        
        function simulateProgress(total, delay) {
            const interval = Math.max(delay * 0.8, 100);
            const progressInterval = setInterval(() => {
                if (!automationState.isRunning) {
                    clearInterval(progressInterval);
                    return;
                }
                
                automationState.generated = Math.min(automationState.generated + 1, total);
                updateProgress();
                
                if (automationState.generated >= total) {
                    clearInterval(progressInterval);
                    setTimeout(() => {
                        stopAutomation();
                        showStatus('success', 'Automation completed successfully!');
                        loadAutomationAnalytics();
                    }, 1000);
                }
            }, interval);
        }
        
        function updateProgress() {
            const percent = automationState.total > 0 ? (automationState.generated / automationState.total) * 100 : 0;
            automationState.progress = percent;
            
            document.getElementById('mainProgressBar').style.width = percent + '%';
            document.getElementById('progressPercent').textContent = Math.round(percent) + '%';
            document.getElementById('generatedCount').textContent = automationState.generated;
            document.getElementById('remainingCount').textContent = automationState.total - automationState.generated;
            
            // Calculate rate
            if (automationState.startTime) {
                const elapsed = (Date.now() - automationState.startTime) / 1000 / 60; // minutes
                const rate = elapsed > 0 ? Math.round(automationState.generated / elapsed) : 0;
                document.getElementById('generationRate').textContent = rate + '/min';
            }
        }
        
        function showStatus(type, message, details = '') {
            const statusPanel = document.getElementById('automationStatus');
            const statusMessage = document.getElementById('statusMessage');
            const statusDetails = document.getElementById('statusDetails');
            
            statusPanel.className = 'status-panel ' + type;
            statusMessage.textContent = message;
            statusDetails.textContent = details;
            statusPanel.style.display = 'block';
            
            if (type === 'success' || type === 'info') {
                setTimeout(() => {
                    statusPanel.style.display = 'none';
                }, 5000);
            }
        }
        
        function applyTemplate(templateName) {
            const templates = {
                'social-boost': {
                    clickCount: 25,
                    delay: 1500,
                    pattern: 'organic'
                },
                'viral-simulation': {
                    clickCount: 200,
                    delay: 500,
                    pattern: 'burst'
                },
                'steady-growth': {
                    clickCount: 50,
                    delay: 2000,
                    pattern: 'steady'
                },
                'stress-test': {
                    clickCount: 1000,
                    delay: 100,
                    pattern: 'random'
                }
            };
            
            const template = templates[templateName];
            if (template) {
                document.getElementById('clickCount').value = template.clickCount;
                document.getElementById('clickRange').value = template.clickCount;
                document.getElementById('clickDelay').value = template.delay;
                document.getElementById('automationPattern').value = template.pattern;
                
                showStatus('info', 'Applied template: ' + templateName);
                showAutomationTab('url-automation');
            }
        }
        
        function saveTemplate() {
            const name = document.getElementById('templateName').value;
            if (!name) {
                alert('Please enter a template name');
                return;
            }
            
            const template = {
                clickCount: document.getElementById('clickCount').value,
                delay: document.getElementById('clickDelay').value,
                pattern: document.getElementById('automationPattern').value
            };
            
            automationState.templates[name] = template;
            showStatus('success', 'Template saved: ' + name);
            document.getElementById('templateName').value = '';
        }
        
        function scheduleAutomation() {
            const type = document.getElementById('scheduleType').value;
            const time = document.getElementById('scheduleTime').value;
            const template = document.getElementById('scheduleTemplate').value;
            
            if (!time) {
                alert('Please select a time');
                return;
            }
            
            showStatus('info', 'Scheduling feature will be implemented in a future update');
        }
        
        function loadAutomationAnalytics() {
            // Load automation statistics
            fetch('/admin/api/automation/stats', {
                headers: { 'Authorization': 'Bearer ' + localStorage.getItem('adminToken') }
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('totalGenerated').textContent = data.totalOperations || 0;
                document.getElementById('todayGenerated').textContent = data.todayOperations || 0;
                document.getElementById('currentSecurityLevel').textContent = data.securityLevel || 'Standard';
            })
            .catch(error => console.error('Error loading analytics:', error));
        }
        
        function exportAnalytics(format) {
            fetch('/admin/api/automation/export?format=' + format, {
                headers: { 'Authorization': 'Bearer ' + localStorage.getItem('adminToken') }
            })
            .then(response => response.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'automation-analytics.' + format;
                a.click();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => {
                showStatus('error', 'Export failed: ' + error.message);
            });
        }
        
        function generateReport() {
            showStatus('info', 'Generating comprehensive automation report...');
            // Report generation will be implemented in future update
        }
    </script>
</body>
</html>`);
});
// Admin API endpoint to get all URLs
app.get('/admin/api/urls', requireAuth, (req, res) => {
  res.json(urlDatabase);
});

// Admin API endpoint to delete a URL
app.delete('/admin/api/urls/:shortCode', requireAuth, (req, res) => {
  const { shortCode } = req.params;
  
  if (urlDatabase[shortCode]) {
    delete urlDatabase[shortCode];
    // Also delete analytics data
    delete urlAnalytics[shortCode];
    res.json({ message: 'URL deleted successfully' });
  } else {
    res.status(404).json({ error: 'Short code not found' });
  }
});

// Admin API endpoint to get analytics for all URLs
app.get('/admin/api/analytics', requireAuth, (req, res) => {
  const analyticsData = {};
  
  for (const shortCode in urlDatabase) {
    analyticsData[shortCode] = urlAnalytics[shortCode] || {
      clicks: 0,
      firstClick: null,
      lastClick: null,
      clickHistory: []
    };
  }
  
  res.json(analyticsData);
});

// Admin API endpoint to get analytics for a specific URL
app.get('/admin/api/analytics/:shortCode', requireAuth, (req, res) => {
  const { shortCode } = req.params;
  
  if (!urlDatabase[shortCode]) {
    return res.status(404).json({ error: 'Short code not found' });
  }
  
  const analytics = urlAnalytics[shortCode] || {
    clicks: 0,
    firstClick: null,
    lastClick: null,
    clickHistory: []
  };
  
  res.json({
    shortCode,
    originalUrl: urlDatabase[shortCode],
    analytics
  });
});

// ========================================
// AUTOMATION FEATURES (ADMIN ONLY)
// ========================================

// Function to simulate a click for testing purposes
function simulateClick(shortCode, userAgent = 'AutomationBot/1.0', ip = '127.0.0.1') {
  if (!urlDatabase[shortCode]) {
    return false;
  }
  
  const mockReq = {
    get: (header) => header === 'User-Agent' ? userAgent : 'Unknown',
    ip: ip,
    connection: { remoteAddress: ip }
  };
  
  recordClick(shortCode, mockReq);
  return true;
}

// Function to simulate a blog view for testing purposes
function simulateBlogView(blogId, userAgent = 'BlogViewBot/1.0', ip = '127.0.0.1') {
  if (!blogDatabase[blogId]) {
    return false;
  }
  
  const mockReq = {
    get: (header) => header === 'User-Agent' ? userAgent : 'Unknown',
    ip: ip,
    connection: { remoteAddress: ip }
  };
  
  recordBlogView(blogId, mockReq);
  return true;
}

// Admin API endpoint for automated click generation
app.post('/admin/api/automation/generate-clicks', requireAdvancedAuth, (req, res) => {
  const { shortCode, clickCount = 1, userAgents = [], delay = 100 } = req.body;
  const ip = getClientIP(req);
  
  // Rate limiting check
  const rateLimitCheck = checkRateLimit(ip, 'single');
  if (!rateLimitCheck.allowed) {
    logAdminOperation('RATE_LIMITED', ip, { operation: 'generate-clicks', reason: rateLimitCheck.reason });
    return res.status(429).json({ 
      error: rateLimitCheck.reason,
      code: 'RATE_LIMITED',
      retryAfter: rateLimitCheck.remainingTime || 3600
    });
  }
  
  if (!shortCode || !urlDatabase[shortCode]) {
    return res.status(400).json({ error: 'Valid short code is required' });
  }
  
  const count = Math.min(Math.max(parseInt(clickCount), 1), 1000); // Limit to 1000 clicks max
  const baseDelay = Math.max(parseInt(delay), 10); // Minimum 10ms delay
  const actualDelay = calculateProgressiveDelay(ip, baseDelay);
  
  // Enhanced validation for large operations
  if (count > 500) {
    const tracking = adminSecurity.ipTracking[ip];
    if (tracking && tracking.operationsLastHour.length > 20) {
      return res.status(429).json({ 
        error: 'Large operations require fewer recent activities. Please wait before performing operations over 500 clicks.',
        code: 'LARGE_OPERATION_RESTRICTED'
      });
    }
  }
  
  // Log the operation
  logAdminOperation('SINGLE_AUTOMATION', ip, { shortCode, clickCount: count, delay: actualDelay });
  
  const defaultUserAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15',
    'Mozilla/5.0 (Android 11; Mobile; rv:93.0) Gecko/93.0 Firefox/93.0'
  ];
  
  const agents = userAgents.length > 0 ? userAgents : defaultUserAgents;
  let generated = 0;
  
  // Generate clicks with delay
  const generateInterval = setInterval(() => {
    if (generated >= count) {
      clearInterval(generateInterval);
      return;
    }
    
    const randomAgent = agents[Math.floor(Math.random() * agents.length)];
    const randomIp = `192.168.1.${Math.floor(Math.random() * 254) + 1}`;
    
    if (simulateClick(shortCode, randomAgent, randomIp)) {
      generated++;
    }
    
    if (generated >= count) {
      clearInterval(generateInterval);
    }
  }, actualDelay);
  
  res.json({ 
    message: `Started generating ${count} clicks for ${shortCode}`,
    shortCode,
    clickCount: count,
    delay: actualDelay,
    securityLevel: actualDelay > baseDelay ? 'ENHANCED' : 'STANDARD',
    progressiveDelay: actualDelay > baseDelay
  });
});

// Admin API endpoint for bulk click generation on all URLs
app.post('/admin/api/automation/generate-bulk-clicks', requireAdvancedAuth, (req, res) => {
  const { clicksPerUrl = 5, delay = 100 } = req.body;
  const ip = getClientIP(req);
  
  // Enhanced rate limiting for bulk operations
  const rateLimitCheck = checkRateLimit(ip, 'bulk');
  if (!rateLimitCheck.allowed) {
    logAdminOperation('BULK_RATE_LIMITED', ip, { operation: 'generate-bulk-clicks', reason: rateLimitCheck.reason });
    return res.status(429).json({ 
      error: rateLimitCheck.reason,
      code: 'BULK_RATE_LIMITED',
      retryAfter: rateLimitCheck.remainingTime || 86400
    });
  }
  
  const urlCodes = Object.keys(urlDatabase);
  if (urlCodes.length === 0) {
    return res.status(400).json({ error: 'No URLs available for automation' });
  }
  
  const count = Math.min(Math.max(parseInt(clicksPerUrl), 1), CONFIG.BULK_CLICK_LIMIT);
  const baseDelay = Math.max(parseInt(delay), CONFIG.BASE_DELAYS.CLICK_GENERATION);
  const actualDelay = calculateProgressiveDelay(ip, baseDelay);
  
  const totalEstimatedClicks = urlCodes.length * count;
  
  // Enhanced security for large bulk operations
  if (totalEstimatedClicks > 1000) {
    const tracking = adminSecurity.ipTracking[ip];
    const recentBulkOps = tracking ? tracking.bulkOperationsLastDay.length : 0;
    
    if (recentBulkOps >= 3) {
      return res.status(429).json({ 
        error: 'Large bulk operations are limited to 3 per day for security reasons.',
        code: 'LARGE_BULK_LIMIT_EXCEEDED',
        suggestedAction: 'Consider smaller batch sizes or contact administrator.'
      });
    }
  }
  
  // Multi-factor confirmation requirement for very large operations
  if (totalEstimatedClicks > 2000) {
    const confirmationToken = req.headers['x-confirmation-token'];
    const expectedToken = 'BULK_CONFIRM_' + Date.now().toString().slice(-6);
    
    if (!confirmationToken || confirmationToken !== expectedToken) {
      return res.status(400).json({ 
        error: 'Large bulk operations require additional confirmation.',
        code: 'CONFIRMATION_REQUIRED',
        confirmationToken: expectedToken,
        estimatedClicks: totalEstimatedClicks,
        warningMessage: `This operation will generate ${totalEstimatedClicks} clicks across ${urlCodes.length} URLs. Please confirm by including the token in X-Confirmation-Token header.`
      });
    }
  }
  
  // Log the bulk operation
  logAdminOperation('BULK_AUTOMATION', ip, { 
    urlCount: urlCodes.length, 
    clicksPerUrl: count, 
    totalClicks: totalEstimatedClicks,
    delay: actualDelay,
    securityLevel: actualDelay > baseDelay ? 'ENHANCED' : 'STANDARD'
  });
  
  const defaultUserAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15',
    'Mozilla/5.0 (Android 11; Mobile; rv:93.0) Gecko/93.0 Firefox/93.0'
  ];
  
  let totalGenerated = 0;
  let currentUrlIndex = 0;
  let clicksForCurrentUrl = 0;
  
  const generateInterval = setInterval(() => {
    if (currentUrlIndex >= urlCodes.length) {
      clearInterval(generateInterval);
      logAdminOperation('BULK_COMPLETED', ip, { totalGenerated, duration: Date.now() });
      return;
    }
    
    const currentShortCode = urlCodes[currentUrlIndex];
    const randomAgent = defaultUserAgents[Math.floor(Math.random() * defaultUserAgents.length)];
    const randomIp = `192.168.1.${Math.floor(Math.random() * 254) + 1}`;
    
    if (simulateClick(currentShortCode, randomAgent, randomIp)) {
      totalGenerated++;
      clicksForCurrentUrl++;
    }
    
    if (clicksForCurrentUrl >= count) {
      currentUrlIndex++;
      clicksForCurrentUrl = 0;
    }
  }, actualDelay);
  
  res.json({ 
    message: `Started bulk generation: ${count} clicks per URL for ${urlCodes.length} URLs`,
    totalUrls: urlCodes.length,
    clicksPerUrl: count,
    estimatedTotal: totalEstimatedClicks,
    delay: actualDelay,
    securityLevel: actualDelay > baseDelay ? 'ENHANCED' : 'STANDARD',
    progressiveDelay: actualDelay > baseDelay,
    operationId: Date.now(),
    estimatedDuration: Math.ceil((totalEstimatedClicks * actualDelay) / 1000) + ' seconds'
  });
});

// Admin API endpoint to get automation statistics
app.get('/admin/api/automation/stats', requireAdvancedAuth, (req, res) => {
  const ip = getClientIP(req);
  const totalUrls = Object.keys(urlDatabase).length;
  const totalClicks = Object.values(urlAnalytics).reduce((sum, analytics) => sum + analytics.clicks, 0);
  const urlsWithClicks = Object.values(urlAnalytics).filter(analytics => analytics.clicks > 0).length;
  
  const tracking = adminSecurity.ipTracking[ip] || { 
    operationsLastHour: [], 
    bulkOperationsLastDay: [], 
    lastBulkOperation: 0,
    warningCount: 0 
  };
  
  const now = Date.now();
  const oneHour = 60 * 60 * 1000;
  const oneDay = 24 * oneHour;
  
  // Clean old operations for accurate counts
  const recentOperations = tracking.operationsLastHour.filter(time => now - time < oneHour).length;
  const recentBulkOps = tracking.bulkOperationsLastDay.filter(time => now - time < oneDay).length;
  const nextBulkAllowed = tracking.lastBulkOperation + adminSecurity.rateLimits.cooldownBetweenBulk;
  const bulkCooldownRemaining = Math.max(0, Math.ceil((nextBulkAllowed - now) / 1000));
  
  res.json({
    totalUrls,
    totalClicks,
    urlsWithClicks,
    averageClicksPerUrl: totalUrls > 0 ? Math.round(totalClicks / totalUrls * 10) / 10 : 0,
    urlsWithoutClicks: totalUrls - urlsWithClicks,
    security: {
      emergencyStop: adminSecurity.emergencyStop,
      rateLimits: adminSecurity.rateLimits,
      currentStatus: {
        operationsThisHour: recentOperations,
        bulkOperationsToday: recentBulkOps,
        bulkCooldownSeconds: bulkCooldownRemaining,
        warningLevel: tracking.warningCount > 5 ? 'HIGH' : tracking.warningCount > 2 ? 'MEDIUM' : 'LOW'
      },
      remainingLimits: {
        operationsThisHour: Math.max(0, adminSecurity.rateLimits.maxOperationsPerHour - recentOperations),
        bulkOperationsToday: Math.max(0, adminSecurity.rateLimits.maxBulkOperationsPerDay - recentBulkOps)
      }
    }
  });
});

// New security dashboard endpoint
app.get('/admin/api/security/dashboard', requireAdvancedAuth, (req, res) => {
  const ip = getClientIP(req);
  
  // Recent operation logs (last 50)
  const recentLogs = adminSecurity.operationLogs.slice(-50).reverse();
  
  // Security statistics
  const now = Date.now();
  const oneHour = 60 * 60 * 1000;
  const oneDay = 24 * oneHour;
  
  const allIPs = Object.keys(adminSecurity.ipTracking);
  const activeIPs = allIPs.filter(ip => {
    const tracking = adminSecurity.ipTracking[ip];
    return tracking.operationsLastHour.some(time => now - time < oneHour);
  });
  
  const totalOperationsToday = Object.values(adminSecurity.ipTracking).reduce((sum, tracking) => {
    return sum + tracking.operationsLastHour.filter(time => now - time < oneDay).length;
  }, 0);
  
  const totalBulkOpsToday = Object.values(adminSecurity.ipTracking).reduce((sum, tracking) => {
    return sum + tracking.bulkOperationsLastDay.filter(time => now - time < oneDay).length;
  }, 0);
  
  res.json({
    securityStatus: {
      emergencyStop: adminSecurity.emergencyStop,
      activeIPs: activeIPs.length,
      totalOperationsToday,
      totalBulkOpsToday,
      totalLogEntries: adminSecurity.operationLogs.length
    },
    rateLimits: adminSecurity.rateLimits,
    recentActivity: recentLogs,
    ipStatistics: allIPs.map(ipAddr => {
      const tracking = adminSecurity.ipTracking[ipAddr];
      return {
        ip: ipAddr,
        operationsLastHour: tracking.operationsLastHour.filter(time => now - time < oneHour).length,
        bulkOperationsLastDay: tracking.bulkOperationsLastDay.filter(time => now - time < oneDay).length,
        lastActivity: tracking.operationsLastHour.length > 0 ? 
          new Date(Math.max(...tracking.operationsLastHour)) : null,
        warningCount: tracking.warningCount,
        status: tracking.warningCount > 5 ? 'HIGH_RISK' : 
                tracking.warningCount > 2 ? 'MODERATE_RISK' : 'NORMAL'
      };
    }).sort((a, b) => b.operationsLastHour - a.operationsLastHour)
  });
});

// Emergency security controls
app.post('/admin/api/security/emergency-stop', requireAdvancedAuth, (req, res) => {
  const ip = getClientIP(req);
  const { action } = req.body; // 'enable' or 'disable'
  
  if (action === 'enable') {
    adminSecurity.emergencyStop = true;
    logAdminOperation('EMERGENCY_STOP_ENABLED', ip, { reason: 'Manual activation' });
    res.json({ message: 'Emergency stop activated. All automation operations are now suspended.' });
  } else if (action === 'disable') {
    adminSecurity.emergencyStop = false;
    logAdminOperation('EMERGENCY_STOP_DISABLED', ip, { reason: 'Manual deactivation' });
    res.json({ message: 'Emergency stop deactivated. Automation operations are now allowed.' });
  } else {
    res.status(400).json({ error: 'Invalid action. Use "enable" or "disable".' });
  }
});

// ========================================
// ENHANCED AUTOMATION API ENDPOINTS
// ========================================

// Enhanced automation endpoint to stop current operations
app.post('/admin/api/automation/stop', requireAdvancedAuth, (req, res) => {
  const ip = getClientIP(req);
  
  // Set emergency stop if not already set
  if (!adminSecurity.emergencyStop) {
    adminSecurity.emergencyStop = true;
    logAdminOperation('EMERGENCY_STOP', ip, { reason: 'Manual stop requested via automation panel' });
  }
  
  res.json({ 
    message: 'Automation operations stopped successfully',
    emergencyStop: true 
  });
});

// Automation export endpoint
app.get('/admin/api/automation/export', requireAdvancedAuth, (req, res) => {
  const format = req.query.format || 'json';
  const ip = getClientIP(req);
  const tracking = adminSecurity.ipTracking[ip];
  
  const exportData = {
    generatedAt: new Date().toISOString(),
    operations: tracking ? tracking.operationsHistory || [] : [],
    urlAnalytics: Object.keys(urlAnalytics).map(shortCode => ({
      shortCode,
      originalUrl: urlDatabase[shortCode],
      ...urlAnalytics[shortCode]
    })),
    blogAnalytics: Object.keys(blogAnalytics).map(blogId => ({
      blogId,
      title: blogDatabase[blogId]?.title || 'Unknown',
      ...blogAnalytics[blogId]
    })),
    securityInfo: {
      securityLevel: getSecurityLevel(ip),
      operationsCount: tracking ? tracking.operationsLastHour.length : 0,
      bulkOperationsCount: tracking ? tracking.bulkOperationsLastDay.length : 0
    }
  };
  
  if (format === 'csv') {
    // Convert to CSV format
    let csv = 'Timestamp,Operation,Target,Count,Status\n';
    if (exportData.operations.length > 0) {
      exportData.operations.forEach(op => {
        csv += `${op.timestamp || new Date().toISOString()},${op.type},${op.metadata?.shortCode || op.metadata?.blogId || 'bulk'},${op.metadata?.clickCount || op.metadata?.viewCount || 'N/A'},${op.type.includes('ERROR') ? 'Failed' : 'Success'}\n`;
      });
    } else {
      csv += 'No operations recorded yet,N/A,N/A,N/A,N/A\n';
    }
    
    res.setHeader('Content-Type', 'text/csv');
    res.setHeader('Content-Disposition', 'attachment; filename="automation-report.csv"');
    res.send(csv);
  } else {
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Content-Disposition', 'attachment; filename="automation-report.json"');
    res.json(exportData);
  }
});

// Enhanced automation templates endpoint
app.get('/admin/api/automation/templates', requireAdvancedAuth, (req, res) => {
  const templates = {
    'social-boost': {
      name: 'Social Media Boost',
      description: 'Optimized for social media sharing with organic patterns',
      clickCount: 25,
      delay: 1500,
      pattern: 'organic',
      category: 'social'
    },
    'viral-simulation': {
      name: 'Viral Content Simulation',
      description: 'Simulates viral content spread with burst patterns',
      clickCount: 200,
      delay: 500,
      pattern: 'burst',
      category: 'viral'
    },
    'steady-growth': {
      name: 'Steady Growth',
      description: 'Consistent growth pattern for long-term testing',
      clickCount: 50,
      delay: 2000,
      pattern: 'steady',
      category: 'growth'
    },
    'stress-test': {
      name: 'Stress Testing',
      description: 'High-volume testing for performance validation',
      clickCount: 1000,
      delay: 100,
      pattern: 'random',
      category: 'testing'
    }
  };
  
  res.json(templates);
});

// Enhanced automation analytics endpoint
app.get('/admin/api/automation/analytics', requireAdvancedAuth, (req, res) => {
  const ip = getClientIP(req);
  const tracking = adminSecurity.ipTracking[ip];
  
  // Calculate comprehensive analytics
  const totalUrls = Object.keys(urlDatabase).length;
  const totalClicks = Object.values(urlAnalytics).reduce((sum, analytics) => sum + analytics.clicks, 0);
  const totalBlogPosts = Object.keys(blogDatabase).length;
  const totalBlogViews = Object.values(blogAnalytics).reduce((sum, analytics) => sum + analytics.views, 0);
  
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const todayTimestamp = today.getTime();
  
  // Calculate today's operations
  const todayOperations = tracking ? tracking.operationsLastHour.filter(time => time >= todayTimestamp).length : 0;
  
  // Calculate success rate (assuming most operations succeed unless there are errors)
  const totalOperations = tracking ? tracking.operationsLastHour.length + (tracking.operationsHistory?.length || 0) : 0;
  const successRate = totalOperations > 0 ? 95 : 100; // Simplified success rate calculation
  
  // Calculate average rates
  const avgClickRate = totalOperations > 0 ? Math.round((totalClicks / totalOperations) * 60) : 0; // per minute
  const peakRate = avgClickRate * 2; // Simplified peak rate calculation
  
  res.json({
    totals: {
      urls: totalUrls,
      clicks: totalClicks,
      blogPosts: totalBlogPosts,
      blogViews: totalBlogViews,
      operations: totalOperations
    },
    today: {
      operations: todayOperations,
      generated: Math.round(todayOperations * 15) // Estimate based on average operations
    },
    performance: {
      successRate: successRate + '%',
      avgRate: avgClickRate + ' clicks/min',
      peakRate: peakRate + ' clicks/min',
      securityLevel: getSecurityLevel(ip)
    },
    trends: {
      hourlyOperations: tracking ? tracking.operationsLastHour.length : 0,
      dailyBulkOperations: tracking ? tracking.bulkOperationsLastDay.length : 0,
      progressiveDelayActive: tracking ? calculateProgressiveDelay(ip, 100) > 100 : false
    }
  });
});

// Enhanced automation patterns implementation
function getAutomationPattern(pattern, baseDelay) {
  switch(pattern) {
    case 'burst':
      return {
        delay: Math.max(baseDelay * 0.3, 50),
        variation: baseDelay * 0.2,
        description: 'Fast bursts with short intervals'
      };
    case 'organic':
      return {
        delay: baseDelay + Math.random() * baseDelay * 0.5,
        variation: baseDelay * 0.3,
        description: 'Natural variation mimicking real user behavior'
      };
    case 'random':
      return {
        delay: baseDelay + Math.random() * baseDelay,
        variation: baseDelay * 0.5,
        description: 'Random intervals for unpredictable patterns'
      };
    case 'steady':
    default:
      return {
        delay: baseDelay,
        variation: 0,
        description: 'Consistent steady rate'
      };
  }
}

// Override the existing generate-clicks endpoint with enhanced pattern support
app.post('/admin/api/automation/generate-clicks', requireAdvancedAuth, (req, res) => {
  const { shortCode, clickCount = 1, userAgents = [], delay = 100, pattern = 'steady' } = req.body;
  const ip = getClientIP(req);
  
  // Rate limiting check
  const rateLimitCheck = checkRateLimit(ip, 'single');
  if (!rateLimitCheck.allowed) {
    logAdminOperation('RATE_LIMITED', ip, { operation: 'generate-clicks', reason: rateLimitCheck.reason });
    return res.status(429).json({ 
      error: rateLimitCheck.reason,
      code: 'RATE_LIMITED',
      retryAfter: rateLimitCheck.remainingTime || 3600
    });
  }
  
  if (!shortCode || !urlDatabase[shortCode]) {
    return res.status(400).json({ error: 'Valid short code is required' });
  }
  
  const count = Math.min(Math.max(parseInt(clickCount), 1), 1000);
  const baseDelay = Math.max(parseInt(delay), 10);
  const progressiveDelay = calculateProgressiveDelay(ip, baseDelay);
  const patternConfig = getAutomationPattern(pattern, progressiveDelay);
  
  // Enhanced validation for large operations
  if (count > 500) {
    const tracking = adminSecurity.ipTracking[ip];
    if (tracking && tracking.operationsLastHour.length > 20) {
      return res.status(429).json({ 
        error: 'Large operations require fewer recent activities. Please wait before performing operations over 500 clicks.',
        code: 'LARGE_OPERATION_RESTRICTED'
      });
    }
  }
  
  // Log the operation with enhanced metadata
  logAdminOperation('ENHANCED_SINGLE_AUTOMATION', ip, { 
    shortCode, 
    clickCount: count, 
    delay: patternConfig.delay, 
    pattern,
    baseDelay,
    progressiveDelay: progressiveDelay > baseDelay
  });
  
  const defaultUserAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (Version/17.0 Mobile/15E148 Safari/604.1)',
    'Mozilla/5.0 (Android 13; Mobile; rv:120.0) Gecko/120.0 Firefox/120.0'
  ];
  
  const agents = userAgents.length > 0 ? userAgents : defaultUserAgents;
  let generated = 0;
  
  // Enhanced click generation with sophisticated patterns
  const generateClicks = () => {
    if (generated >= count || adminSecurity.emergencyStop) {
      return;
    }
    
    const randomAgent = agents[Math.floor(Math.random() * agents.length)];
    const randomIp = `192.168.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 254) + 1}`;
    
    if (simulateClick(shortCode, randomAgent, randomIp)) {
      generated++;
    }
    
    if (generated < count && !adminSecurity.emergencyStop) {
      // Calculate next delay with pattern variation
      let nextDelay = patternConfig.delay;
      if (patternConfig.variation > 0) {
        nextDelay += (Math.random() - 0.5) * patternConfig.variation;
      }
      nextDelay = Math.max(nextDelay, 50); // Minimum 50ms delay
      
      setTimeout(generateClicks, nextDelay);
    }
  };
  
  // Start generation with initial delay
  setTimeout(generateClicks, patternConfig.delay);
  
  res.json({ 
    message: `Started generating ${count} clicks for ${shortCode} using ${pattern} pattern`,
    shortCode,
    clickCount: count,
    delay: patternConfig.delay,
    pattern,
    patternDescription: patternConfig.description,
    securityLevel: progressiveDelay > baseDelay ? 'ENHANCED' : 'STANDARD',
    progressiveDelay: progressiveDelay > baseDelay,
    estimatedDuration: Math.round((count * patternConfig.delay) / 1000) + ' seconds',
    enhancedFeatures: true
  });
});

// ========================================
// SAFELINK CONFIGURATION API ENDPOINTS (ADMIN ONLY)
// ========================================

// Get SafeLink global configuration
app.get('/admin/api/safelink/config', requireAuth, (req, res) => {
  res.json({
    enabled: safelinkConfig.enabled,
    defaultTemplate: safelinkConfig.defaultTemplate
  });
});

// Update SafeLink global configuration
app.post('/admin/api/safelink/config', requireAuth, (req, res) => {
  const { enabled, defaultTemplate } = req.body;
  
  if (typeof enabled === 'boolean') {
    safelinkConfig.enabled = enabled;
  }
  
  if (defaultTemplate >= 1 && defaultTemplate <= 8) {
    safelinkConfig.defaultTemplate = defaultTemplate;
  }
  
  const ip = getClientIP(req);
  logAdminOperation('SAFELINK_CONFIG_UPDATED', ip, { enabled, defaultTemplate });
  
  res.json({ message: 'SafeLink configuration updated successfully' });
});

// Get specific SafeLink template configuration
app.get('/admin/api/safelink/template/:templateId', requireAuth, (req, res) => {
  const templateId = parseInt(req.params.templateId);
  
  if (templateId < 1 || templateId > 8) {
    return res.status(400).json({ error: 'Invalid template ID. Must be 1-8.' });
  }
  
  const template = safelinkConfig.templates[templateId];
  if (!template) {
    return res.status(404).json({ error: 'Template not found' });
  }
  
  res.json(template);
});

// Update specific SafeLink template configuration
app.post('/admin/api/safelink/template/:templateId', requireAuth, (req, res) => {
  const templateId = parseInt(req.params.templateId);
  
  if (templateId < 1 || templateId > 8) {
    return res.status(400).json({ error: 'Invalid template ID. Must be 1-8.' });
  }
  
  const { enabled, waitTime, skipButton, adSlots } = req.body;
  
  if (!safelinkConfig.templates[templateId]) {
    return res.status(404).json({ error: 'Template not found' });
  }
  
  // Update template configuration
  if (typeof enabled === 'boolean') {
    safelinkConfig.templates[templateId].enabled = enabled;
  }
  
  if (waitTime >= 5 && waitTime <= 60) {
    safelinkConfig.templates[templateId].waitTime = waitTime;
  }
  
  if (typeof skipButton === 'boolean') {
    safelinkConfig.templates[templateId].skipButton = skipButton;
  }
  
  if (adSlots && typeof adSlots === 'object') {
    safelinkConfig.templates[templateId].adSlots = {
      ...safelinkConfig.templates[templateId].adSlots,
      ...adSlots
    };
  }
  
  const ip = getClientIP(req);
  logAdminOperation('SAFELINK_TEMPLATE_UPDATED', ip, { templateId, enabled, waitTime, skipButton });
  
  res.json({ message: `SafeLink Template ${templateId} updated successfully` });
});

// ========================================
// BLOG VIEW MODIFICATION FEATURES (ADMIN ONLY)
// ========================================

// Admin API endpoint for automated blog view generation
app.post('/admin/api/blog/automation/generate-views', requireAdvancedAuth, (req, res) => {
  const { blogId, viewCount = 1, userAgents = [], delay = 100 } = req.body;
  const ip = getClientIP(req);
  
  // Rate limiting check
  const rateLimitCheck = checkRateLimit(ip, 'single');
  if (!rateLimitCheck.allowed) {
    logAdminOperation('RATE_LIMITED', ip, { operation: 'generate-blog-views', reason: rateLimitCheck.reason });
    return res.status(429).json({ 
      error: rateLimitCheck.reason,
      code: 'RATE_LIMITED',
      retryAfter: rateLimitCheck.remainingTime || 3600
    });
  }
  
  if (!blogId || !blogDatabase[blogId]) {
    return res.status(400).json({ error: 'Valid blog post ID is required' });
  }
  
  const count = Math.min(Math.max(parseInt(viewCount), 1), 1000); // Limit to 1000 views max
  const baseDelay = Math.max(parseInt(delay), 10); // Minimum 10ms delay
  const actualDelay = calculateProgressiveDelay(ip, baseDelay);
  
  // Enhanced validation for large operations
  if (count > 500) {
    const tracking = adminSecurity.ipTracking[ip];
    if (tracking && tracking.operationsLastHour.length > 20) {
      return res.status(429).json({ 
        error: 'Large operations require fewer recent activities. Please wait before performing operations over 500 views.',
        code: 'LARGE_OPERATION_RESTRICTED'
      });
    }
  }
  
  // Log the operation
  logAdminOperation('SINGLE_BLOG_AUTOMATION', ip, { blogId, viewCount: count, delay: actualDelay });
  
  const defaultUserAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15',
    'Mozilla/5.0 (Android 11; Mobile; rv:93.0) Gecko/93.0 Firefox/93.0'
  ];
  
  const agents = userAgents.length > 0 ? userAgents : defaultUserAgents;
  let generated = 0;
  
  // Generate views with delay
  const generateInterval = setInterval(() => {
    if (generated >= count) {
      clearInterval(generateInterval);
      return;
    }
    
    const randomAgent = agents[Math.floor(Math.random() * agents.length)];
    const randomIp = `192.168.1.${Math.floor(Math.random() * 254) + 1}`;
    
    if (simulateBlogView(blogId, randomAgent, randomIp)) {
      generated++;
    }
    
    if (generated >= count) {
      clearInterval(generateInterval);
    }
  }, actualDelay);
  
  res.json({ 
    message: `Started generating ${count} views for blog post`,
    blogId,
    viewCount: count,
    delay: actualDelay,
    securityLevel: actualDelay > baseDelay ? 'ENHANCED' : 'STANDARD',
    progressiveDelay: actualDelay > baseDelay
  });
});

// Admin API endpoint for bulk blog view generation on all posts
app.post('/admin/api/blog/automation/generate-bulk-views', requireAdvancedAuth, (req, res) => {
  const { viewsPerPost = 5, delay = 100 } = req.body;
  const ip = getClientIP(req);
  
  // Enhanced rate limiting for bulk operations
  const rateLimitCheck = checkRateLimit(ip, 'bulk');
  if (!rateLimitCheck.allowed) {
    logAdminOperation('BULK_RATE_LIMITED', ip, { operation: 'generate-bulk-blog-views', reason: rateLimitCheck.reason });
    return res.status(429).json({ 
      error: rateLimitCheck.reason,
      code: 'BULK_RATE_LIMITED',
      retryAfter: rateLimitCheck.remainingTime || 86400
    });
  }
  
  const publishedPosts = Object.values(blogDatabase).filter(post => post.published);
  if (publishedPosts.length === 0) {
    return res.status(400).json({ error: 'No published blog posts available for automation' });
  }
  
  const count = Math.min(Math.max(parseInt(viewsPerPost), 1), CONFIG.BULK_BLOG_VIEW_LIMIT);
  const baseDelay = Math.max(parseInt(delay), CONFIG.BASE_DELAYS.BLOG_VIEW_GENERATION);
  const actualDelay = calculateProgressiveDelay(ip, baseDelay);
  
  const totalEstimatedViews = publishedPosts.length * count;
  
  // Enhanced security for large bulk operations
  if (totalEstimatedViews > 500) {
    const tracking = adminSecurity.ipTracking[ip];
    const recentBulkOps = tracking ? tracking.bulkOperationsLastDay.length : 0;
    
    if (recentBulkOps >= 3) {
      return res.status(429).json({ 
        error: 'Large bulk blog operations are limited to 3 per day for security reasons.',
        code: 'LARGE_BULK_LIMIT_EXCEEDED',
        suggestedAction: 'Consider smaller batch sizes or contact administrator.'
      });
    }
  }
  
  // Multi-factor confirmation requirement for very large operations
  if (totalEstimatedViews > 1000) {
    const confirmationToken = req.headers['x-confirmation-token'];
    const expectedToken = 'BLOG_BULK_CONFIRM_' + Date.now().toString().slice(-6);
    
    if (!confirmationToken || confirmationToken !== expectedToken) {
      return res.status(400).json({ 
        error: 'Large bulk blog operations require additional confirmation.',
        code: 'CONFIRMATION_REQUIRED',
        confirmationToken: expectedToken,
        estimatedViews: totalEstimatedViews,
        warningMessage: `This operation will generate ${totalEstimatedViews} views across ${publishedPosts.length} blog posts. Please confirm by including the token in X-Confirmation-Token header.`
      });
    }
  }
  
  // Log the bulk operation
  logAdminOperation('BULK_BLOG_AUTOMATION', ip, { 
    postCount: publishedPosts.length, 
    viewsPerPost: count, 
    totalViews: totalEstimatedViews,
    delay: actualDelay,
    securityLevel: actualDelay > baseDelay ? 'ENHANCED' : 'STANDARD'
  });
  
  const defaultUserAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15',
    'Mozilla/5.0 (Android 11; Mobile; rv:93.0) Gecko/93.0 Firefox/93.0'
  ];
  
  let totalGenerated = 0;
  let currentPostIndex = 0;
  let viewsForCurrentPost = 0;
  
  const generateInterval = setInterval(() => {
    if (currentPostIndex >= publishedPosts.length) {
      clearInterval(generateInterval);
      logAdminOperation('BULK_BLOG_COMPLETED', ip, { totalGenerated, duration: Date.now() });
      return;
    }
    
    const currentPost = publishedPosts[currentPostIndex];
    const randomAgent = defaultUserAgents[Math.floor(Math.random() * defaultUserAgents.length)];
    const randomIp = `192.168.1.${Math.floor(Math.random() * 254) + 1}`;
    
    if (simulateBlogView(currentPost.id, randomAgent, randomIp)) {
      totalGenerated++;
      viewsForCurrentPost++;
    }
    
    if (viewsForCurrentPost >= count) {
      currentPostIndex++;
      viewsForCurrentPost = 0;
    }
  }, actualDelay);
  
  res.json({ 
    message: `Started bulk blog view generation: ${count} views per post for ${publishedPosts.length} published posts`,
    totalPosts: publishedPosts.length,
    viewsPerPost: count,
    estimatedTotal: totalEstimatedViews,
    delay: actualDelay,
    securityLevel: actualDelay > baseDelay ? 'ENHANCED' : 'STANDARD',
    progressiveDelay: actualDelay > baseDelay,
    operationId: Date.now(),
    estimatedDuration: Math.ceil((totalEstimatedViews * actualDelay) / 1000) + ' seconds'
  });
});

// Admin API endpoint to manually set blog view count
app.post('/admin/api/blog/automation/set-views', requireAuth, (req, res) => {
  const { blogId, viewCount = 0 } = req.body;
  
  if (!blogId || !blogDatabase[blogId]) {
    return res.status(400).json({ error: 'Valid blog post ID is required' });
  }
  
  const count = Math.max(parseInt(viewCount), 0); // Minimum 0 views
  
  // Initialize or update analytics
  if (!blogAnalytics[blogId]) {
    blogAnalytics[blogId] = {
      views: 0,
      firstView: null,
      lastView: null,
      viewHistory: []
    };
  }
  
  const now = new Date();
  blogAnalytics[blogId].views = count;
  
  if (count > 0) {
    if (!blogAnalytics[blogId].firstView) {
      blogAnalytics[blogId].firstView = now;
    }
    blogAnalytics[blogId].lastView = now;
  } else {
    // Reset if setting to 0
    blogAnalytics[blogId].firstView = null;
    blogAnalytics[blogId].lastView = null;
    blogAnalytics[blogId].viewHistory = [];
  }
  
  res.json({ 
    message: `Blog view count set to ${count}`,
    blogId,
    newViewCount: count
  });
});

// Admin API endpoint to get blog automation statistics
app.get('/admin/api/blog/automation/stats', requireAuth, (req, res) => {
  const totalPosts = Object.keys(blogDatabase).length;
  const publishedPosts = Object.values(blogDatabase).filter(post => post.published).length;
  const totalViews = Object.values(blogAnalytics).reduce((sum, analytics) => sum + analytics.views, 0);
  const postsWithViews = Object.values(blogAnalytics).filter(analytics => analytics.views > 0).length;
  
  res.json({
    totalPosts,
    publishedPosts,
    totalViews,
    postsWithViews,
    averageViewsPerPost: publishedPosts > 0 ? Math.round(totalViews / publishedPosts * 10) / 10 : 0,
    postsWithoutViews: publishedPosts - postsWithViews
  });
});

// ========================================
// BLOG ROUTES AND FUNCTIONALITY
// ========================================

// Public blog listing page
app.get('/blog', (req, res) => {
  const publishedPosts = Object.values(blogDatabase).filter(post => post.published);
  publishedPosts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
  
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Blog - URL Shortener</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f5f5;
                line-height: 1.6;
            }
            .header {
                background-color: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                margin-bottom: 30px;
                text-align: center;
            }
            .header h1 {
                margin: 0;
                color: #333;
                background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
            }
            .experimental-badge {
                background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
                color: white;
                padding: 5px 10px;
                border-radius: 15px;
                font-size: 12px;
                font-weight: bold;
                display: inline-block;
                margin-left: 10px;
                animation: pulse 2s infinite;
            }
            @keyframes pulse {
                0% { opacity: 1; }
                50% { opacity: 0.7; }
                100% { opacity: 1; }
            }
            .nav-links {
                margin-top: 20px;
            }
            .nav-links a {
                color: #007bff;
                text-decoration: none;
                margin: 0 15px;
                font-weight: bold;
            }
            .nav-links a:hover {
                text-decoration: underline;
            }
            .blog-post {
                background-color: white;
                padding: 25px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                margin-bottom: 25px;
                transition: transform 0.2s;
            }
            .blog-post:hover {
                transform: translateY(-2px);
            }
            .blog-post h2 {
                margin-top: 0;
                color: #333;
            }
            .blog-post h2 a {
                color: #333;
                text-decoration: none;
            }
            .blog-post h2 a:hover {
                color: #007bff;
            }
            .blog-meta {
                color: #666;
                font-size: 14px;
                margin-bottom: 15px;
            }
            .blog-excerpt {
                color: #555;
                margin-bottom: 15px;
            }
            .read-more {
                background-color: #007bff;
                color: white;
                padding: 8px 16px;
                border-radius: 5px;
                text-decoration: none;
                font-size: 14px;
                display: inline-block;
            }
            .read-more:hover {
                background-color: #0056b3;
            }
            .no-posts {
                text-align: center;
                color: #666;
                background-color: white;
                padding: 40px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            .blog-stats {
                background-color: #e7f3ff;
                padding: 10px 15px;
                border-radius: 5px;
                margin-top: 10px;
                font-size: 12px;
                color: #666;
            }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>📝 Blog<span class="experimental-badge">EXPERIMENTAL</span></h1>
            <p>Welcome to our experimental blog featuring insights, tips, and stories!</p>
            <div class="nav-links">
                <a href="/">🔗 URL Shortener</a>
                <a href="/admin">🛠️ Admin Panel</a>
            </div>
        </div>

        ${publishedPosts.length === 0 ? `
            <div class="no-posts">
                <h2>No blog posts yet!</h2>
                <p>Check back soon for interesting content.</p>
            </div>
        ` : publishedPosts.map(post => {
            const analytics = blogAnalytics[post.id] || { views: 0 };
            const excerpt = post.content.replace(/<[^>]*>/g, '').substring(0, 200) + '...';
            return `
                <article class="blog-post">
                    <h2><a href="/blog/${post.slug}">${post.title}</a></h2>
                    <div class="blog-meta">
                        By ${post.author} • ${new Date(post.createdAt).toLocaleDateString()} • ${analytics.views} views
                    </div>
                    <div class="blog-excerpt">${excerpt}</div>
                    <a href="/blog/${post.slug}" class="read-more">Read More →</a>
                    <div class="blog-stats">
                        📊 ${analytics.views} total views • 🔗 <a href="/blog/preview/${post.slug}" target="_blank">Preview with Analytics</a>
                    </div>
                </article>
            `;
        }).join('')}
    </body>
    </html>
  `);
});

// Individual blog post page
app.get('/blog/:slug', (req, res) => {
  const { slug } = req.params;
  const post = Object.values(blogDatabase).find(p => p.slug === slug && p.published);
  
  if (!post) {
    return res.status(404).send(`
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Post Not Found - Blog</title>
          <style>
              body {
                  font-family: Arial, sans-serif;
                  max-width: 600px;
                  margin: 50px auto;
                  padding: 20px;
                  text-align: center;
                  background-color: #f5f5f5;
              }
              .container {
                  background-color: white;
                  padding: 30px;
                  border-radius: 10px;
                  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
              }
              h1 { color: #dc3545; }
              a { color: #007bff; text-decoration: none; }
              a:hover { text-decoration: underline; }
          </style>
      </head>
      <body>
          <div class="container">
              <h1>404 - Post Not Found</h1>
              <p>The blog post you're looking for doesn't exist.</p>
              <a href="/blog">← Back to Blog</a>
          </div>
      </body>
      </html>
    `);
  }

  // Record blog view
  recordBlogView(post.id, req);
  
  const analytics = blogAnalytics[post.id] || { views: 0 };
  const blogShortUrl = `${req.protocol}://${req.get('host')}/blog/${post.slug}`;
  
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${post.title} - Blog</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f5f5;
                line-height: 1.6;
            }
            .container {
                background-color: white;
                padding: 40px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            .post-header {
                border-bottom: 2px solid #e9ecef;
                padding-bottom: 20px;
                margin-bottom: 30px;
            }
            .post-title {
                color: #333;
                margin-bottom: 10px;
                font-size: 2.5em;
                line-height: 1.2;
            }
            .post-meta {
                color: #666;
                font-size: 16px;
                margin-bottom: 20px;
            }
            .post-content {
                color: #444;
                font-size: 18px;
                line-height: 1.8;
            }
            .post-content h1, .post-content h2, .post-content h3 {
                color: #333;
                margin-top: 30px;
            }
            .post-content p {
                margin-bottom: 20px;
            }
            .post-footer {
                margin-top: 40px;
                padding-top: 20px;
                border-top: 1px solid #e9ecef;
            }
            .nav-links {
                text-align: center;
                margin-bottom: 20px;
            }
            .nav-links a {
                color: #007bff;
                text-decoration: none;
                margin: 0 15px;
                font-weight: bold;
            }
            .nav-links a:hover {
                text-decoration: underline;
            }
            .sharing-section {
                background-color: #f8f9fa;
                padding: 20px;
                border-radius: 8px;
                margin-top: 30px;
                text-align: center;
            }
            .sharing-section h3 {
                margin-top: 0;
                color: #333;
            }
            .share-button {
                background-color: #007bff;
                color: white;
                padding: 10px 20px;
                border-radius: 5px;
                text-decoration: none;
                margin: 5px;
                display: inline-block;
                font-size: 14px;
            }
            .share-button:hover {
                background-color: #0056b3;
            }
            .analytics-preview {
                background-color: #e7f3ff;
                padding: 15px;
                border-radius: 8px;
                margin-top: 20px;
                text-align: center;
            }
            .experimental-badge {
                background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
                color: white;
                padding: 3px 8px;
                border-radius: 12px;
                font-size: 11px;
                font-weight: bold;
                margin-left: 8px;
            }
        </style>
    </head>
    <body>
        <div class="nav-links">
            <a href="/blog">← Back to Blog</a>
            <a href="/">🔗 URL Shortener</a>
            <a href="/admin">🛠️ Admin Panel</a>
        </div>
        
        <div class="container">
            <header class="post-header">
                <h1 class="post-title">${post.title}<span class="experimental-badge">EXPERIMENTAL</span></h1>
                <div class="post-meta">
                    By <strong>${post.author}</strong> • 
                    Published on ${new Date(post.createdAt).toLocaleDateString()} • 
                    ${analytics.views} views
                </div>
            </header>
            
            <main class="post-content">
                ${post.content}
            </main>
            
            <footer class="post-footer">
                <div class="sharing-section">
                    <h3>📱 Share This Post</h3>
                    <p>Create short URLs for social sharing:</p>
                    <a href="javascript:void(0)" onclick="createShortUrl()" class="share-button">🔗 Create Short URL</a>
                    <a href="/blog/preview/${post.slug}" target="_blank" class="share-button">👀 Preview & Analytics</a>
                    <a href="javascript:void(0)" onclick="generateQR()" class="share-button">📱 Generate QR Code</a>
                </div>
                
                <div class="analytics-preview">
                    <strong>📊 Post Analytics:</strong> ${analytics.views} total views
                </div>
            </footer>
        </div>
        
        <script>
            async function createShortUrl() {
                try {
                    const response = await fetch('/shorten', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            originalUrl: window.location.href
                        })
                    });
                    
                    const data = await response.json();
                    if (response.ok) {
                        const shortUrl = window.location.origin + '/' + data.shortCode;
                        prompt('Short URL created! Copy this:', shortUrl);
                    } else {
                        // Try without custom code if it already exists
                        const response2 = await fetch('/shorten', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ originalUrl: window.location.href })
                        });
                        const data2 = await response2.json();
                        if (response2.ok) {
                            const shortUrl = window.location.origin + '/' + data2.shortCode;
                            prompt('Short URL created! Copy this:', shortUrl);
                        } else {
                            alert('Error creating short URL');
                        }
                    }
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            }
            
            function generateQR() {
                const qrUrl = 'https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=' + encodeURIComponent(window.location.href);
                window.open(qrUrl, '_blank');
            }
        </script>
    </body>
    </html>
  `);
});

// Blog preview page (experimental feature)
app.get('/blog/preview/:slug', (req, res) => {
  const { slug } = req.params;
  const post = Object.values(blogDatabase).find(p => p.slug === slug && p.published);
  
  if (!post) {
    return res.status(404).send(`
      <!DOCTYPE html>
      <html><head><title>Post Not Found</title></head>
      <body><h1>Post Not Found</h1><a href="/blog">← Back to Blog</a></body></html>
    `);
  }

  const analytics = blogAnalytics[post.id] || { views: 0, firstView: null, lastView: null, viewHistory: [] };
  const blogUrl = `${req.protocol}://${req.get('host')}/blog/${post.slug}`;
  
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Blog Preview - ${post.title}</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 50px auto;
                padding: 20px;
                background-color: #f5f5f5;
            }
            .container {
                background-color: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            h1 {
                color: #333;
                text-align: center;
                margin-bottom: 30px;
                background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
            }
            .experimental-badge {
                background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
                color: white;
                padding: 5px 10px;
                border-radius: 15px;
                font-size: 12px;
                font-weight: bold;
                margin-left: 10px;
            }
            .preview-info {
                background-color: #f8f9fa;
                padding: 20px;
                border-radius: 8px;
                margin-bottom: 20px;
            }
            .url-info {
                margin-bottom: 15px;
            }
            .label {
                font-weight: bold;
                color: #555;
            }
            .url {
                word-break: break-all;
                color: #007bff;
            }
            .stats {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 15px;
                margin-bottom: 20px;
            }
            .stat-card {
                background-color: #e9ecef;
                padding: 15px;
                border-radius: 8px;
                text-align: center;
            }
            .stat-number {
                font-size: 24px;
                font-weight: bold;
                color: #007bff;
            }
            .stat-label {
                font-size: 12px;
                color: #666;
                margin-top: 5px;
            }
            .action-buttons {
                display: flex;
                gap: 15px;
                justify-content: center;
                flex-wrap: wrap;
            }
            .btn {
                padding: 12px 24px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
                text-decoration: none;
                display: inline-block;
                text-align: center;
                transition: background-color 0.3s;
            }
            .btn-primary {
                background-color: #007bff;
                color: white;
            }
            .btn-primary:hover {
                background-color: #0056b3;
            }
            .btn-secondary {
                background-color: #6c757d;
                color: white;
            }
            .btn-secondary:hover {
                background-color: #545b62;
            }
            .btn-success {
                background-color: #28a745;
                color: white;
            }
            .btn-success:hover {
                background-color: #218838;
            }
            .warning {
                background-color: #fff3cd;
                border: 1px solid #ffeaa7;
                color: #856404;
                padding: 15px;
                border-radius: 5px;
                margin-bottom: 20px;
            }
            .qr-code {
                text-align: center;
                margin: 20px 0;
            }
            .qr-code img {
                border: 1px solid #ddd;
                border-radius: 8px;
            }
            .post-excerpt {
                background-color: #e7f3ff;
                padding: 20px;
                border-radius: 8px;
                margin: 20px 0;
                border-left: 4px solid #007bff;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>📝 Blog Preview<span class="experimental-badge">EXPERIMENTAL</span></h1>
            
            <div class="warning">
                <strong>🔍 Blog Analytics Preview:</strong> Get insights into this blog post's performance and engagement.
            </div>
            
            <div class="preview-info">
                <div class="url-info">
                    <span class="label">Blog Post:</span><br>
                    <span class="url">${post.title}</span>
                </div>
                <div class="url-info">
                    <span class="label">URL:</span><br>
                    <span class="url">${blogUrl}</span>
                </div>
                <div class="url-info">
                    <span class="label">Author:</span><br>
                    <span>${post.author}</span>
                </div>
                <div class="url-info">
                    <span class="label">Published:</span><br>
                    <span>${new Date(post.createdAt).toLocaleDateString()}</span>
                </div>
            </div>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number">${analytics.views}</div>
                    <div class="stat-label">Total Views</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${analytics.firstView ? new Date(analytics.firstView).toLocaleDateString() : 'Never'}</div>
                    <div class="stat-label">First Viewed</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${analytics.lastView ? new Date(analytics.lastView).toLocaleDateString() : 'Never'}</div>
                    <div class="stat-label">Last Viewed</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${analytics.viewHistory ? analytics.viewHistory.length : 0}</div>
                    <div class="stat-label">Recent Views</div>
                </div>
            </div>
            
            <div class="post-excerpt">
                <h3>Post Excerpt:</h3>
                <p>${post.content.replace(/<[^>]*>/g, '').substring(0, 300)}...</p>
            </div>
            
            <div class="qr-code">
                <h3>QR Code</h3>
                <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(blogUrl)}" alt="QR Code for ${blogUrl}">
            </div>
            
            <div class="action-buttons">
                <a href="${blogUrl}" class="btn btn-primary">📖 Read Full Post</a>
                <a href="/blog" class="btn btn-secondary">📝 Back to Blog</a>
                <button onclick="copyToClipboard('${blogUrl}')" class="btn btn-success">📋 Copy URL</button>
                <button onclick="createShortUrl()" class="btn btn-secondary">🔗 Create Short URL</button>
            </div>
        </div>
        
        <script>
            function copyToClipboard(text) {
                navigator.clipboard.writeText(text).then(() => {
                    alert('Blog URL copied to clipboard!');
                });
            }
            
            async function createShortUrl() {
                try {
                    const response = await fetch('/shorten', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            originalUrl: '${blogUrl}'
                        })
                    });
                    
                    const data = await response.json();
                    if (response.ok) {
                        const shortUrl = window.location.origin + '/' + data.shortCode;
                        prompt('Short URL created for blog post! Copy this:', shortUrl);
                    } else {
                        alert('Error: ' + data.error);
                    }
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            }
        </script>
    </body>
    </html>
  `);
});

// Admin blog management routes
app.get('/admin/blog', (req, res) => {
  res.send(`
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blog Management - Admin</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .header { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 20px; display: flex; justify-content: space-between; align-items: center; }
        .header h1 { margin: 0; color: #333; }
        .experimental-badge { background: linear-gradient(45deg, #ff6b6b, #4ecdc4); color: white; padding: 5px 10px; border-radius: 15px; font-size: 12px; margin-left: 10px; }
        .btn { padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; text-decoration: none; font-size: 14px; margin: 0 5px; }
        .btn-primary { background: #007bff; color: white; }
        .btn-secondary { background: #6c757d; color: white; }
        .btn-success { background: #28a745; color: white; }
        .btn-danger { background: #dc3545; color: white; }
        .container { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 20px; }
        .automation-panel { display: none; }
        .automation-grid { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; margin-bottom: 20px; }
        .automation-card { background: #f8f9fa; padding: 20px; border-radius: 8px; }
        .form-group { margin-bottom: 15px; }
        .form-group label { display: block; margin-bottom: 5px; font-weight: bold; }
        .form-group input, .form-group select { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box; }
        table { width: 100%; border-collapse: collapse; }
        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background: #f8f9fa; }
    </style>
</head>
<body>
    <div class="header">
        <h1>📝 Blog Management<span class="experimental-badge">EXPERIMENTAL</span></h1>
        <div>
            <a href="/blog" class="btn btn-secondary" target="_blank">View Blog</a>
            <a href="/admin/dashboard" class="btn btn-secondary">URL Dashboard</a>
            <button class="btn btn-success" onclick="showCreateForm()">+ New Post</button>
            <button class="btn btn-primary" onclick="toggleAutomation()" style="background: #ff6b6b;">🎯 Blog Views</button>
            <a href="/admin" class="btn btn-danger">Logout</a>
        </div>
    </div>

    <div class="container automation-panel" id="automationPanel">
        <h2>🎯 Blog Views Modification <span class="experimental-badge">EXPERIMENTAL</span></h2>
        <p>Modify blog post view counts for testing purposes. These modified views will be visible to all blog visitors.</p>
        
        <div class="automation-grid">
            <div class="automation-card">
                <h3>Generate Views</h3>
                <div class="form-group">
                    <label>Target Post:</label>
                    <select id="targetPost">
                        <option value="">Select post...</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Number of Views:</label>
                    <input type="number" id="viewCount" value="10" min="1" max="1000">
                </div>
                <button class="btn btn-success" onclick="generateViews()">Generate Views</button>
            </div>
            
            <div class="automation-card">
                <h3>Bulk Generation</h3>
                <div class="form-group">
                    <label>Views per Post:</label>
                    <input type="number" id="bulkViews" value="5" min="1" max="30">
                    <small style="color: #e74c3c; display: block; margin-top: 5px;">⚠️ Max 30 per post for security</small>
                </div>
                <button class="btn btn-primary" onclick="generateBulkViews()">Generate for All Posts</button>
            </div>
            
            <div class="automation-card">
                <h3>Set Manual Count</h3>
                <div class="form-group">
                    <label>Target Post:</label>
                    <select id="manualPost">
                        <option value="">Select post...</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>View Count:</label>
                    <input type="number" id="manualCount" value="100" min="0">
                </div>
                <button class="btn btn-secondary" onclick="setManualViews()">Set Count</button>
            </div>
        </div>
        
        <div id="automationStatus" style="background: #e7f3ff; padding: 15px; border-radius: 8px; margin-top: 20px; display: none;">
            <div id="statusMessage"></div>
        </div>
    </div>

    <div class="container">
        <h2>Blog Posts</h2>
        <table>
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Author</th>
                    <th>Status</th>
                    <th>Views</th>
                    <th>Created</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="postsTable">
                <tr><td colspan="6">Loading...</td></tr>
            </tbody>
        </table>
    </div>

    <script>
        let blogPosts = {};
        let blogAnalytics = {};

        function checkAuth() {
            const token = localStorage.getItem('adminToken');
            if (!token) { window.location.href = '/admin'; return false; }
            return token;
        }

        async function loadPosts() {
            const token = checkAuth();
            if (!token) return;

            try {
                const [postsResponse, analyticsResponse] = await Promise.all([
                    fetch('/admin/api/blog/posts', { headers: { 'Authorization': 'Bearer ' + token } }),
                    fetch('/admin/api/blog/analytics', { headers: { 'Authorization': 'Bearer ' + token } })
                ]);

                if (postsResponse.ok && analyticsResponse.ok) {
                    blogPosts = await postsResponse.json();
                    blogAnalytics = await analyticsResponse.json();
                    displayPosts();
                    populateDropdowns();
                } else {
                    alert('Failed to load blog data');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        function displayPosts() {
            const tbody = document.getElementById('postsTable');
            if (Object.keys(blogPosts).length === 0) {
                tbody.innerHTML = '<tr><td colspan="6">No blog posts found</td></tr>';
                return;
            }

            tbody.innerHTML = '';
            for (const [id, post] of Object.entries(blogPosts)) {
                const analytics = blogAnalytics[id] || { views: 0 };
                const row = tbody.insertRow();
                row.innerHTML = '<td>' + post.title + '</td>' +
                               '<td>' + post.author + '</td>' +
                               '<td>' + (post.published ? 'Published' : 'Draft') + '</td>' +
                               '<td><strong>' + analytics.views + '</strong></td>' +
                               '<td>' + new Date(post.createdAt).toLocaleDateString() + '</td>' +
                               '<td><button class="btn btn-secondary" onclick="deletePost(\'' + id + '\')">Delete</button></td>';
            }
        }

        function populateDropdowns() {
            const publishedPosts = Object.values(blogPosts).filter(post => post.published);
            const selects = [document.getElementById('targetPost'), document.getElementById('manualPost')];
            
            selects.forEach(select => {
                select.innerHTML = '<option value="">Select post...</option>';
                publishedPosts.forEach(post => {
                    const option = document.createElement('option');
                    option.value = post.id;
                    option.textContent = post.title.substring(0, 50);
                    select.appendChild(option);
                });
            });
        }

        function toggleAutomation() {
            const panel = document.getElementById('automationPanel');
            panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
        }

        async function generateViews() {
            const token = checkAuth();
            const blogId = document.getElementById('targetPost').value;
            const viewCount = document.getElementById('viewCount').value;

            if (!blogId) { alert('Please select a post'); return; }

            try {
                const response = await fetch('/admin/api/blog/automation/generate-views', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token },
                    body: JSON.stringify({ blogId, viewCount: parseInt(viewCount), delay: 100 })
                });

                if (response.ok) {
                    showStatus('Started generating ' + viewCount + ' views...');
                    setTimeout(() => { loadPosts(); showStatus('Completed!'); }, 2000);
                } else {
                    alert('Error generating views');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        async function generateBulkViews() {
            const token = checkAuth();
            const viewsPerPost = document.getElementById('bulkViews').value;
            const publishedCount = Object.values(blogPosts).filter(post => post.published).length;

            if (publishedCount === 0) { alert('No published posts'); return; }
            if (!confirm('Generate ' + viewsPerPost + ' views for each of ' + publishedCount + ' posts?')) return;

            try {
                const response = await fetch('/admin/api/blog/automation/generate-bulk-views', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token },
                    body: JSON.stringify({ viewsPerPost: parseInt(viewsPerPost), delay: 200 })
                });

                if (response.ok) {
                    const data = await response.json();
                    showStatus('Started bulk generation: ' + data.estimatedTotal + ' total views...');
                    setTimeout(() => { loadPosts(); showStatus('Bulk generation completed!'); }, 5000);
                } else {
                    alert('Error generating bulk views');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        async function setManualViews() {
            const token = checkAuth();
            const blogId = document.getElementById('manualPost').value;
            const viewCount = document.getElementById('manualCount').value;

            if (!blogId) { alert('Please select a post'); return; }

            const post = blogPosts[blogId];
            if (!confirm('Set view count for "' + post.title + '" to ' + viewCount + '?')) return;

            try {
                const response = await fetch('/admin/api/blog/automation/set-views', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token },
                    body: JSON.stringify({ blogId, viewCount: parseInt(viewCount) })
                });

                if (response.ok) {
                    showStatus('View count set to ' + viewCount);
                    loadPosts();
                } else {
                    alert('Error setting view count');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        function showStatus(message) {
            const statusDiv = document.getElementById('automationStatus');
            document.getElementById('statusMessage').textContent = message;
            statusDiv.style.display = 'block';
        }

        async function deletePost(postId) {
            const token = checkAuth();
            const post = blogPosts[postId];
            if (!confirm('Delete "' + post.title + '"?')) return;

            try {
                const response = await fetch('/admin/api/blog/posts/' + postId, {
                    method: 'DELETE',
                    headers: { 'Authorization': 'Bearer ' + token }
                });

                if (response.ok) {
                    loadPosts();
                } else {
                    alert('Failed to delete post');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        function showCreateForm() {
            alert('Blog creation feature will be added in next update');
        }

        window.onload = loadPosts;
    </script>
</body>
</html>
  `);
});
// Admin API endpoints for blog management
app.get('/admin/api/blog/posts', requireAuth, (req, res) => {
  res.json(blogDatabase);
});

app.post('/admin/api/blog/posts', requireAuth, (req, res) => {
  const { title, content, author, published } = req.body;
  
  if (!title || !content || !author) {
    return res.status(400).json({ error: 'Title, content, and author are required' });
  }
  
  const id = generateBlogId();
  const slug = generateSlug(title);
  const now = new Date().toISOString();
  
  // Ensure slug is unique
  let finalSlug = slug;
  let counter = 1;
  while (Object.values(blogDatabase).some(post => post.slug === finalSlug)) {
    finalSlug = `${slug}-${counter}`;
    counter++;
  }
  
  const post = {
    id,
    title,
    content,
    author,
    published: Boolean(published),
    slug: finalSlug,
    createdAt: now,
    updatedAt: now
  };
  
  blogDatabase[id] = post;
  res.json(post);
});

app.put('/admin/api/blog/posts/:id', requireAuth, (req, res) => {
  const { id } = req.params;
  const { title, content, author, published } = req.body;
  
  if (!blogDatabase[id]) {
    return res.status(404).json({ error: 'Post not found' });
  }
  
  if (!title || !content || !author) {
    return res.status(400).json({ error: 'Title, content, and author are required' });
  }
  
  const existingPost = blogDatabase[id];
  const slug = title !== existingPost.title ? generateSlug(title) : existingPost.slug;
  
  // Ensure slug is unique (excluding current post)
  let finalSlug = slug;
  let counter = 1;
  while (Object.values(blogDatabase).some(post => post.slug === finalSlug && post.id !== id)) {
    finalSlug = `${slug}-${counter}`;
    counter++;
  }
  
  const updatedPost = {
    ...existingPost,
    title,
    content,
    author,
    published: Boolean(published),
    slug: finalSlug,
    updatedAt: new Date().toISOString()
  };
  
  blogDatabase[id] = updatedPost;
  res.json(updatedPost);
});

app.delete('/admin/api/blog/posts/:id', requireAuth, (req, res) => {
  const { id } = req.params;
  
  if (blogDatabase[id]) {
    delete blogDatabase[id];
    // Also delete analytics data
    delete blogAnalytics[id];
    res.json({ message: 'Post deleted successfully' });
  } else {
    res.status(404).json({ error: 'Post not found' });
  }
});

app.get('/admin/api/blog/analytics', requireAuth, (req, res) => {
  const analyticsData = {};
  
  for (const postId in blogDatabase) {
    analyticsData[postId] = blogAnalytics[postId] || {
      views: 0,
      firstView: null,
      lastView: null,
      viewHistory: []
    };
  }
  
  res.json(analyticsData);
});

// ========================================
// SAFELINK ROUTES
// ========================================

// SafeLink preview route for testing templates
app.get('/safelink/preview/:templateId', (req, res) => {
  const templateId = parseInt(req.params.templateId);
  
  if (templateId < 1 || templateId > 8) {
    return res.status(400).send('Invalid template ID');
  }
  
  const template = safelinkConfig.templates[templateId];
  if (!template) {
    return res.status(404).send('Template not found');
  }
  
  res.send(generateSafelinkPage(templateId, template, 'https://example.com', 'PREVIEW'));
});

// SafeLink redirect route
app.get('/safelink/:templateId/:shortCode', (req, res) => {
  const { templateId, shortCode } = req.params;
  const template = safelinkConfig.templates[parseInt(templateId)];
  const originalUrl = urlDatabase[shortCode];
  
  if (!originalUrl) {
    return res.status(404).send('URL not found');
  }
  
  if (!template || !template.enabled) {
    // If template is disabled, redirect directly
    recordClick(shortCode, req);
    return res.redirect(originalUrl);
  }
  
  res.send(generateSafelinkPage(templateId, template, originalUrl, shortCode));
});

// SafeLink proceed route (when user clicks continue)
app.get('/safelink/proceed/:shortCode', (req, res) => {
  const { shortCode } = req.params;
  const originalUrl = urlDatabase[shortCode];
  
  if (originalUrl) {
    recordClick(shortCode, req);
    res.redirect(originalUrl);
  } else {
    res.status(404).send('URL not found');
  }
});

// Function to generate SafeLink page HTML
function generateSafelinkPage(templateId, template, targetUrl, shortCode) {
  const isPreview = shortCode === 'PREVIEW';
  const proceedUrl = isPreview ? '#' : `/safelink/proceed/${shortCode}`;
  const skipDisplay = template.skipButton ? 'block' : 'none';
  
  const destinationText = isPreview ? 'https://example.com (Preview Mode)' : targetUrl;
  
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SafeLink ${templateId} - ${template.name}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            display: grid;
            grid-template-columns: 1fr 300px;
            gap: 20px;
        }
        .main-content {
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        .sidebar {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            height: fit-content;
        }
        .countdown {
            text-align: center;
            margin: 30px 0;
            padding: 20px;
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            border-radius: 10px;
            color: white;
        }
        .countdown-timer {
            font-size: 48px;
            font-weight: bold;
            margin: 10px 0;
        }
        .proceed-button {
            display: none;
            background: linear-gradient(45deg, #28a745, #20c997);
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 18px;
            border-radius: 25px;
            cursor: pointer;
            text-decoration: none;
            margin: 20px auto;
            text-align: center;
            width: 200px;
            transition: all 0.3s;
        }
        .proceed-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .skip-button {
            display: ${skipDisplay};
            background: #6c757d;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 15px;
            cursor: pointer;
            text-decoration: none;
            margin: 10px auto;
            text-align: center;
            width: 150px;
            font-size: 14px;
        }
        .info-box {
            background: #e3f2fd;
            border-left: 4px solid #2196f3;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }
        @media (max-width: 768px) {
            .container {
                grid-template-columns: 1fr;
                padding: 10px;
            }
            .countdown-timer {
                font-size: 36px;
            }
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="main-content">
            <h1>🔗 ${template.name}</h1>
            <p style="font-size: 18px; color: #666;">Please wait while we prepare your link...</p>
            
            ${template.adSlots.header || '<div style="text-align:center;margin:20px 0;padding:20px;background:#f8f9fa;border-radius:8px;min-height:90px;display:flex;align-items:center;justify-content:center;">Header Ad Slot</div>'}
            
            <div class="info-box">
                <strong>🎯 Destination:</strong> ${destinationText}<br>
                <strong>🛡️ Security:</strong> This link has been verified as safe<br>
                <strong>⏱️ Wait Time:</strong> ${template.waitTime} seconds
            </div>
            
            <div class="countdown">
                <div>Please wait while we verify the link security...</div>
                <div class="countdown-timer" id="countdown">${template.waitTime}</div>
                <div>seconds remaining</div>
            </div>
            
            <div style="text-align: center;">
                <a href="${proceedUrl}" class="proceed-button" id="proceedBtn">
                    🚀 Continue to Website
                </a>
                <br>
                <a href="${proceedUrl}" class="skip-button" onclick="return confirm('Skip waiting? You might miss important security checks.')">
                    ⚡ Skip Wait
                </a>
            </div>
            
            ${template.adSlots.video || ''}
            ${template.adSlots.banner || ''}
            
            ${template.adSlots.footer || '<div style="text-align:center;margin:20px 0;padding:20px;background:#f8f9fa;border-radius:8px;min-height:120px;display:flex;align-items:center;justify-content:center;">Footer Ad Slot</div>'}
        </div>
        
        <div class="sidebar">
            <h3>💰 Premium Offers</h3>
            ${template.adSlots.sidebar || '<div style="margin:20px 0;padding:15px;background:#f8f9fa;border-radius:8px;min-height:250px;display:flex;align-items:center;justify-content:center;">Sidebar Ad Slot</div>'}
            
            <div style="margin-top: 20px; padding: 15px; background: #fff3cd; border-radius: 8px;">
                <h4 style="margin-top: 0;">🛡️ Security Features</h4>
                <ul style="margin: 0; padding-left: 20px;">
                    <li>Link verification</li>
                    <li>Malware scanning</li>
                    <li>Safe browsing</li>
                    <li>Ad-free experience</li>
                </ul>
            </div>
        </div>
    </div>
    
    ${template.adSlots.popup || ''}
    
    <script>
        let timeLeft = ${template.waitTime};
        const countdownElement = document.getElementById('countdown');
        const proceedButton = document.getElementById('proceedBtn');
        
        const timer = setInterval(() => {
            timeLeft--;
            countdownElement.textContent = timeLeft;
            
            if (timeLeft <= 0) {
                clearInterval(timer);
                countdownElement.textContent = '✅';
                proceedButton.style.display = 'inline-block';
                proceedButton.style.animation = 'pulse 2s infinite';
                
                const popup = document.getElementById('popupAd');
                if (popup) {
                    popup.style.display = 'block';
                    setTimeout(() => popup.style.display = 'none', 5000);
                }
            }
        }, 1000);
        
        function closePopup() {
            document.getElementById('popupAd').style.display = 'none';
        }
        
        if (typeof adsbygoogle !== 'undefined') {
            (adsbygoogle = window.adsbygoogle || []).push({});
        }
    </script>
</body>
</html>`;
}

// Redirect endpoint (Modified to support SafeLink)
app.get('/:shortCode', (req, res) => {
  const { shortCode } = req.params;
  const originalUrl = urlDatabase[shortCode];
  
  if (originalUrl) {
    // Check if SafeLink is enabled
    if (safelinkConfig.enabled) {
      const templateId = safelinkConfig.defaultTemplate;
      const template = safelinkConfig.templates[templateId];
      
      // If template is enabled, redirect to SafeLink page
      if (template && template.enabled) {
        return res.redirect(`/safelink/${templateId}/${shortCode}`);
      }
    }
    
    // Direct redirect if SafeLink is disabled or template is disabled
    recordClick(shortCode, req);
    res.redirect(originalUrl);
  } else {
    res.status(404).send(`
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>URL Not Found</title>
          <style>
              body {
                  font-family: Arial, sans-serif;
                  max-width: 600px;
                  margin: 50px auto;
                  padding: 20px;
                  text-align: center;
                  background-color: #f5f5f5;
              }
              .container {
                  background-color: white;
                  padding: 30px;
                  border-radius: 10px;
                  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
              }
              h1 {
                  color: #dc3545;
              }
              a {
                  color: #007bff;
                  text-decoration: none;
              }
              a:hover {
                  text-decoration: underline;
              }
          </style>
      </head>
      <body>
          <div class="container">
              <h1>404 - URL Not Found</h1>
              <p>The short URL you're looking for doesn't exist.</p>
              <a href="/">← Go back to create a new short URL</a>
          </div>
      </body>
      </html>
    `);
  }
});

// API endpoint to get all URLs (for debugging/admin purposes)
app.get('/api/urls', (req, res) => {
  res.json(urlDatabase);
});

// Start server
app.listen(PORT, () => {
  console.log(`URL Shortener server is running on port ${PORT}`);
  console.log(`Visit http://localhost:${PORT} to use the URL shortener`);
});

module.exports = app;